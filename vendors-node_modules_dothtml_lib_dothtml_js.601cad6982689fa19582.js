"use strict";
(self["webpackChunkwedding_website"] = self["webpackChunkwedding_website"] || []).push([["vendors-node_modules_dothtml_lib_dothtml_js"],{

/***/ "./node_modules/dothtml/lib/arg-callback-obj.js":
/*!******************************************************!*\
  !*** ./node_modules/dothtml/lib/arg-callback-obj.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ConditionalArgCallback = exports.ArrayArgCallback = exports.ContentArgCallback = exports.AttrArgCallback = exports.ArgCallback = void 0;
class ArgCallback {
    constructor(element, value) {
        this.el = element;
        this.f = value;
    }
}
exports.ArgCallback = ArgCallback;
class AttrArgCallback extends ArgCallback {
    constructor(element, attributeName, value) {
        super(element, value);
        this.attr = attributeName;
    }
    updateContent(dot) {
        this.el.setAttribute(this.attr, this.f());
    }
}
exports.AttrArgCallback = AttrArgCallback;
class ContentArgCallback extends ArgCallback {
    constructor(element, content) {
        super(element, content);
    }
    updateContent(dot, propVal) {
        dot(this.el).empty().h(this.f(propVal));
    }
}
exports.ContentArgCallback = ContentArgCallback;
class ArrayArgCallback extends ArgCallback {
    constructor(dotTarget, content) {
        super(null, content);
        this.dotTarget = dotTarget;
    }
    updateContent() { }
}
exports.ArrayArgCallback = ArrayArgCallback;
class ConditionalArgCallback extends ArgCallback {
    constructor(startNode, endNode, content, condition) {
        super(null, content);
        this.startNode = startNode;
        this.endNode = endNode;
        this.condition = condition;
        this.lastValue = undefined; // This will be set by the calling code - after the object is added to __currentArgCallback.
    }
    updateContent(dot) {
        if (this.lastValue != !!this.condition()) {
            this.lastValue = !this.lastValue;
            if (this.lastValue) {
                dot._appendOrCreateDocument(this.f, this.endNode.parentNode, this.endNode);
            }
            else {
                do {
                    var e = this.startNode.nextSibling;
                    if (e && e != this.endNode) {
                        e.parentNode.removeChild(e);
                    }
                } while (this.startNode.nextSibling && this.startNode.nextSibling != this.endNode);
            }
        }
    }
}
exports.ConditionalArgCallback = ConditionalArgCallback;
//# sourceMappingURL=arg-callback-obj.js.map

/***/ }),

/***/ "./node_modules/dothtml/lib/component.js":
/*!***********************************************!*\
  !*** ./node_modules/dothtml/lib/component.js ***!
  \***********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
const observable_array_1 = __importDefault(__webpack_require__(/*! ./observable-array */ "./node_modules/dothtml/lib/observable-array.js"));
const dot_1 = __importDefault(__webpack_require__(/*! ./dot */ "./node_modules/dothtml/lib/dot.js"));
const dot_util_1 = __webpack_require__(/*! ./dot-util */ "./node_modules/dothtml/lib/dot-util.js");
const err_1 = __importDefault(__webpack_require__(/*! ./err */ "./node_modules/dothtml/lib/err.js"));
const arg_callback_obj_1 = __webpack_require__(/*! ./arg-callback-obj */ "./node_modules/dothtml/lib/arg-callback-obj.js");
class Component {
    constructor(...args) {
        /**
         * Used internally to indicate the first time $updateStyles is called.
         * This method is called by the static component builder when the component is created.
         * If a prop is accessed within the style builder, the getter reads this field to mark $updateStyles as a dependency.
        */
        this.#initializingStyles = false;
        this.#initializingBuild = false;
        // A bit messy but gets us to MVP for this feature.
        // Ideally this should be made a singleton somehow, perhaps put in the property metadata.
        this.#rebuildStylesOnPropChange = {};
        this.#rebuildBuilderOnPropChange = {};
        this.__built = false;
        this.__stylesSet = false;
        this.__eventsInitialized = false;
        this.$refs = {};
        this.__args = args;
    }
    /**
     * Used internally to indicate the first time $updateStyles is called.
     * This method is called by the static component builder when the component is created.
     * If a prop is accessed within the style builder, the getter reads this field to mark $updateStyles as a dependency.
    */
    #initializingStyles;
    #initializingBuild;
    // A bit messy but gets us to MVP for this feature.
    // Ideally this should be made a singleton somehow, perhaps put in the property metadata.
    #rebuildStylesOnPropChange;
    #rebuildBuilderOnPropChange;
    /**
     * Called once per component, on the first build.
     * TODO: this shouldn't require an instance of the component. Please experiment with fixing this.
    */
    static initializeComponent(obj) {
        if (!obj.constructor.__dotComponentInitialized) {
            obj.constructor.__dotComponentInitialized = true;
            // Additional generic logic that should run once per component.
            obj.constructor.__dotClassNumb = dot_util_1.ClassPrefix.next;
            obj.constructor.__activePropContainer = function ActivePropContainer(obj) {
                this.__component = obj;
            };
            (0, dot_util_1.eachK)(obj.props, (k, v) => {
                Component.createProp(obj.constructor.__activePropContainer, k);
            });
        }
    }
    static build(obj) {
        Component.initializeComponent(obj);
        dot_util_1.GlobalComponentStack.push(obj);
        obj.created && obj.created(...obj.__args);
        if (obj.__built)
            (0, err_1.default)("CB");
        obj.__built = true;
        obj.__propContainer = {
            activePropConstructor: obj.constructor.__activePropContainer,
            rawProps: obj.props || {},
            activeProps: new obj.constructor.__activePropContainer(obj),
            propDependencies: {},
            bindings: {}
        };
        // eachK(obj.props, (k,v) => {
        // 	// Initialize it.
        // 	cc.__propContainer.activeProps[k] = cc.__propContainer.rawProps[k];
        // });
        obj.props = obj.__propContainer.activeProps;
        (0, dot_util_1.eachK)(obj.__propContainer.rawProps, (k, v) => {
            obj.__propContainer.bindings[k] = [];
            obj.props[k] = v;
        });
        // function ComputedContainer(){
        // };
        // let cc = new ComputedContainer();
        // eachK(obj.computed, function(k, v){
        // 	isF(v) ? v : ERR("XF", "computed")
        // 	//createProp(k, CC);
        // 	ComputedContainer.prototype[k] = v;
        // 	Object.defineProperty(ComputedContainer.prototype, k, {
        // 		enumerable: true,
        // 		get: function(){
        // 			// This was commented out pre-ts.
        // 			//configureDependency(v(), this, k);
        // 			return v.call(obj);
        // 		}
        // 	});
        // });
        // obj.computed = cc;
        Component.initializeEventHandlers(obj);
        Component.rebuild(obj);
        // TODO: would be great to do this without a timer, once the DOM is updated. 
        // May require some type of queueing system within dot.
        obj.ready && (0, dot_util_1.sT)(() => {
            dot_util_1.GlobalComponentStack.push(obj);
            obj.ready();
            dot_util_1.GlobalComponentStack.pop();
        }, 0);
        dot_util_1.GlobalComponentStack.pop();
        return obj.$el;
    }
    /**
     * Called any time the component needs to be completely rebuilt.
    */
    static rebuild(obj) {
        let oldEl = obj.$el;
        if (!obj.__eventsInitialized)
            obj.#initializingBuild = true;
        let ret = obj.builder(...obj.__args);
        obj.#initializingBuild = false;
        let lst = ret.getLast();
        (!lst || (lst.parentNode.childNodes.length > 1)) && (0, err_1.default)("C#", obj.name || obj.constructor.name || "(unnamed obj)");
        // Note: I don't know what the justification was for using $obj.el, but all tests pass without it.
        // It was removed to facilitate rebuilding the component (during a prop change).
        obj["__$el"] = /*obj.$el ||*/ lst;
        obj.$el["__dothtml_component"] = obj;
        if (oldEl) {
            // Clean it up and replace it with the new element!
        }
        // TODO: would there be a way to not have to create obj function for each instance?
        if (obj.style) {
            // obj will be the officially supported way to use dothtml.
            obj.$styleBuilder = function () {
                // dot.css.scopeToEl(obj.$el, !obj.__stylesSet);
                dot_1.default.css.scopeToEl(obj.$el);
                if (!obj.__stylesSet) {
                    dot_1.default.css.cacheScopedStaticStyles(obj.$el);
                    obj.__stylesSet = true;
                }
                dot_1.default.css.clearDynamicStyles(obj.$el);
                obj.style(dot_1.default.css);
                dot_1.default.css.unscope();
            };
            if (!obj.__eventsInitialized)
                obj.#initializingStyles = true;
            obj.$updateStyles();
            obj.#initializingStyles = false;
            //styler();
        }
        obj.built && obj.built();
    }
    static initializeEventHandlers(obj) {
        if (!obj.__eventsInitialized) {
            obj.__eventsInitialized = true;
            (0, dot_util_1.eachK)(obj.events, (k, v) => {
                obj.events[k] = function () {
                    for (let f of obj.events[k]["__handlers"]) {
                        f.apply(this, arguments);
                    }
                };
                obj.events[k]["__handlers"] = [];
            });
        }
    }
    static createProp(activePropContainer, name) {
        // var dependencies = [];
        Object.defineProperty(activePropContainer.prototype, name, {
            configurable: false,
            enumerable: false,
            get: function () {
                dot_1.default["__lastProp"] = name;
                dot_1.default["__lastIndex"] = null;
                dot_1.default["__lastComponent"] = this.__component;
                let rawProp = this.__component.__propContainer.rawProps[name];
                Component.configureDependency(this.__component, name);
                return rawProp;
            },
            set: function (value) {
                // TODO: if this value is set, get the list of dependencies, and update them by calling their dot argument callbacks.
                let propVal = value;
                if (value instanceof Array) {
                    propVal = new observable_array_1.default(value);
                    propVal.addEventListener("read", e => {
                        dot_1.default["__lastIndex"] = e.index;
                    });
                }
                this.__component.__propContainer.rawProps[name] = propVal;
                for (let b of this.__component.__propContainer.bindings[name]) {
                    (0, dot_1.default)(b.element).as(dot_1.default.input).setVal(propVal);
                }
                Component.updateProp(this.__component, name);
                return propVal;
            }
        });
    }
    static configureDependency(cc, name) {
        // TODO: verify that there is no memory leak!!
        var cb = dot_1.default["__currentArgCallback"][dot_1.default["__currentArgCallback"].length - 1];
        if (cb) {
            // This means this getter is being used during the invocation of an arg callback.
            // Add it to a collection so that when the value is set, the appropriate component will update.
            let rawProp = cc.__propContainer.rawProps[name];
            if (rawProp instanceof observable_array_1.default) {
                rawProp.addEventListener("itemadded", function (e) {
                    // TODO: More test cases to create:
                    // TODO: what about rendering the list length or something?
                    // TODO: what about a computed field based on length?
                    if (cb instanceof arg_callback_obj_1.ArrayArgCallback) {
                        cb.dotTarget._appendOrCreateDocument(cb.f(e.item, e.index), undefined, e.index);
                    }
                    else if (cb) {
                        Component.updateProp(cc, name);
                    }
                });
                rawProp.addEventListener("itemset", function (e) {
                    if (cb instanceof arg_callback_obj_1.ArrayArgCallback) {
                        var p = cb.dotTarget.__document;
                        var el = p.childNodes[e.index];
                        p.removeChild(el);
                        cb.dotTarget._appendOrCreateDocument(cb.f(e.item, e.index), undefined, e.index);
                    }
                    else if (cb) {
                        Component.updateProp(cc, name);
                    }
                });
                rawProp.addEventListener("itemremoved", function (e) {
                    if (cb instanceof arg_callback_obj_1.ArrayArgCallback) {
                        cb.dotTarget.__document.removeChild(cb.dotTarget.__document.childNodes[e.index]);
                    }
                    else if (cb) {
                        Component.updateProp(cc, name);
                    }
                });
            }
            else {
            }
            var ar = cc.__propContainer.propDependencies[name];
            if (!ar)
                ar = cc.__propContainer.propDependencies[name] = [];
            ar.push(cb);
        }
        // Again I find this a weird way to do it that kind of side-steps the above approach, but it gets the job done and is dead simple.
        if (cc.#initializingStyles) {
            cc.#rebuildStylesOnPropChange[name] = true;
        }
        if (cc.#initializingBuild) {
            cc.#rebuildBuilderOnPropChange[name] = true;
        }
    }
    static updateProp(obj, name) {
        let ar = obj.__propContainer.propDependencies[name];
        let value = obj.__propContainer.rawProps[name];
        // // {f:contentCallback,startNode:startNode, endNode:endNode,condition:condition}
        let updateStyles = false;
        if (false) {}
        else {
            // Maybe update specific areas.
            // This is admittedly more efficient.
            for (let i = 0; i < (ar || []).length; i++) {
                let arg = ar[i];
                // TODO: this could be used to update attributes.
                // But right now that relies exclusively on function setters. It's a bit weird.
                arg.updateContent(dot_1.default, value);
                if (obj.#rebuildStylesOnPropChange[name] || (arg instanceof arg_callback_obj_1.AttrArgCallback && arg.attr == "class")) {
                    updateStyles = true;
                }
            }
        }
        if (updateStyles)
            obj.$updateStyles();
    }
    /**
     * An optional function that gets called before the component is created, scoped to the new component object.
     */
    created(...args) { }
    /**
     * An optional function called after the element has been added. One parameter will be provided containing the added element.
     */
    ready() { }
    /**
     * An optional function called before the component is deleted.
     */
    deleting() { }
    /**
     * An optional function called after the component is deleted.
     */
    deleted() { }
    /**
     * An optional function called after the component is built.
     */
    built() { }
    on(event, handler) {
        Component.initializeEventHandlers(this);
        let e = this.events && this.events[event];
        if (!e)
            (0, err_1.default)("UE", event);
        let handlers = e["__handlers"];
        if (handlers.indexOf(handler) == -1) {
            handlers.push(handler);
        }
    }
    off(event, handler) {
        let e = this.events && this.events[event];
        if (!e)
            (0, err_1.default)("UE", event);
        let handlers = e["__handlers"];
        let i = handlers.indexOf(handler);
        if (i > -1) {
            handlers.splice(i, 1);
        }
    }
    /**
     * The main element of this component - automatically set after the builder is called.
    */
    get $el() {
        return this.__$el;
    }
    $updateStyles() {
        this.$styleBuilder && this.$styleBuilder();
    }
}
exports["default"] = Component;
// Eventually we'd like to set this up. Might be overkill.
// function component<T extends { new (...args: any[]): {} }>(constructor: T) {
// 	return class extends constructor {
// 	  
// 	};
// }
//# sourceMappingURL=component.js.map

/***/ }),

/***/ "./node_modules/dothtml/lib/dot-util.js":
/*!**********************************************!*\
  !*** ./node_modules/dothtml/lib/dot-util.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, exports) => {


// Polyfill for Object.keys(...).forEach.
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.numberStep = exports.floatRegex = exports.GlobalComponentStack = exports.ClassPrefix = exports.str = exports.sT = exports.isF = exports.eachK = void 0;
function eachK(obj, cb) {
    if (obj) {
        var lst = Object.keys(obj);
        for (var i = 0; i < lst.length; i++)
            cb(lst[i], obj[lst[i]]);
    }
}
exports.eachK = eachK;
function isF(v) {
    return v && v.constructor && v.call && v.apply;
}
exports.isF = isF;
exports.sT = setTimeout;
function str(s, v) { return (s || "").toString(v); } // This function seems really weird.
exports.str = str;
class _ClassPrefix {
    constructor() {
        this.current = 0x10000;
    }
    reset() {
        this.current = 0x10000;
    }
    get next() {
        return this.current++;
    }
}
exports.ClassPrefix = new _ClassPrefix();
exports.GlobalComponentStack = [];
exports.floatRegex = new RegExp("[-+]?[0-9]*\\.?[0-9]+(?:[eE][-+]?[0-9]+)?", "g");
/**
 * Function that takes in a bunch of parameters and steps the start value toward the target based on timeRemaining and style.
 * currentValue is the current value.
 * targetValue is the target valaue.
 * timeRemaining is the time remaining in ms.
 * stepProgress is the size of this step.
 * totalDuration is the duration of the entire animation from start to finish (not just this step).
 * style is the type of transition (geometric=exponential, ease, linear).
 * Returns the result.
*/
function numberStep(startValue, targetValue, currentTime, totalDuration, style) {
    startValue = Number(startValue);
    targetValue = Number(targetValue);
    var timeRemaining = totalDuration - currentTime;
    switch (style) {
        case "geometric":
        case "exponential": //This is kind of stupid now that we have ease. I might come back and add it in the future. For now assume ease.
        //	var m = Math.exp(-1 / timeRemaining);
        //	return  targetValue + m * (startValue - targetValue);
        case "ease":
            var m = (-Math.cos(Math.PI * (currentTime / totalDuration)) + 1) * 0.5;
            return startValue + m * (targetValue - startValue);
        case "linear":
        default:
            return startValue + (targetValue - startValue) * (currentTime / totalDuration);
    }
}
exports.numberStep = numberStep;
//# sourceMappingURL=dot-util.js.map

/***/ }),

/***/ "./node_modules/dothtml/lib/dothtml.js":
/*!*********************************************!*\
  !*** ./node_modules/dothtml/lib/dothtml.js ***!
  \*********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DotComponent = exports.dot = void 0;
const dot_1 = __importDefault(__webpack_require__(/*! ./dot */ "./node_modules/dothtml/lib/dot.js"));
exports.dot = dot_1.default;
const component_1 = __importDefault(__webpack_require__(/*! ./component */ "./node_modules/dothtml/lib/component.js"));
dot_1.default.version = "5.2.10";
dot_1.default.Component = component_1.default;
var component_2 = __webpack_require__(/*! ./component */ "./node_modules/dothtml/lib/component.js");
Object.defineProperty(exports, "DotComponent", ({ enumerable: true, get: function () { return __importDefault(component_2).default; } }));
// https://www.youtube.com/JoshSideris
//# sourceMappingURL=dothtml.js.map

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,