"use strict";
(self["webpackChunkwedding_website"] = self["webpackChunkwedding_website"] || []).push([["vendors-node_modules_pixi_assets_lib_resolver_Resolver_js-node_modules_pixi_assets_lib_resolv-0abb79"],{

/***/ "./node_modules/@pixi/assets/lib/resolver/Resolver.js":
/*!************************************************************!*\
  !*** ./node_modules/@pixi/assets/lib/resolver/Resolver.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {



Object.defineProperty(exports, "__esModule", ({ value: true }));

var core = __webpack_require__(/*! @pixi/core */ "./node_modules/@pixi/core/lib/index.js");
var convertToList = __webpack_require__(/*! ../utils/convertToList.js */ "./node_modules/@pixi/assets/lib/utils/convertToList.js");
var createStringVariations = __webpack_require__(/*! ../utils/createStringVariations.js */ "./node_modules/@pixi/assets/lib/utils/createStringVariations.js");
var isSingleItem = __webpack_require__(/*! ../utils/isSingleItem.js */ "./node_modules/@pixi/assets/lib/utils/isSingleItem.js");

class Resolver {
  constructor() {
    this._defaultBundleIdentifierOptions = {
      connector: "-",
      createBundleAssetId: (bundleId, assetId) => `${bundleId}${this._bundleIdConnector}${assetId}`,
      extractAssetIdFromBundle: (bundleId, assetBundleId) => assetBundleId.replace(`${bundleId}${this._bundleIdConnector}`, "")
    };
    this._bundleIdConnector = this._defaultBundleIdentifierOptions.connector;
    this._createBundleAssetId = this._defaultBundleIdentifierOptions.createBundleAssetId;
    this._extractAssetIdFromBundle = this._defaultBundleIdentifierOptions.extractAssetIdFromBundle;
    this._assetMap = {};
    this._preferredOrder = [];
    this._parsers = [];
    this._resolverHash = {};
    this._bundles = {};
  }
  setBundleIdentifier(bundleIdentifier) {
    this._bundleIdConnector = bundleIdentifier.connector ?? this._bundleIdConnector;
    this._createBundleAssetId = bundleIdentifier.createBundleAssetId ?? this._createBundleAssetId;
    this._extractAssetIdFromBundle = bundleIdentifier.extractAssetIdFromBundle ?? this._extractAssetIdFromBundle;
    if (this._extractAssetIdFromBundle("foo", this._createBundleAssetId("foo", "bar")) !== "bar") {
      throw new Error("[Resolver] GenerateBundleAssetId are not working correctly");
    }
  }
  prefer(...preferOrders) {
    preferOrders.forEach((prefer) => {
      this._preferredOrder.push(prefer);
      if (!prefer.priority) {
        prefer.priority = Object.keys(prefer.params);
      }
    });
    this._resolverHash = {};
  }
  set basePath(basePath) {
    this._basePath = basePath;
  }
  get basePath() {
    return this._basePath;
  }
  set rootPath(rootPath) {
    this._rootPath = rootPath;
  }
  get rootPath() {
    return this._rootPath;
  }
  get parsers() {
    return this._parsers;
  }
  reset() {
    this.setBundleIdentifier(this._defaultBundleIdentifierOptions);
    this._assetMap = {};
    this._preferredOrder = [];
    this._resolverHash = {};
    this._rootPath = null;
    this._basePath = null;
    this._manifest = null;
    this._bundles = {};
    this._defaultSearchParams = null;
  }
  setDefaultSearchParams(searchParams) {
    if (typeof searchParams === "string") {
      this._defaultSearchParams = searchParams;
    } else {
      const queryValues = searchParams;
      this._defaultSearchParams = Object.keys(queryValues).map((key) => `${encodeURIComponent(key)}=${encodeURIComponent(queryValues[key])}`).join("&");
    }
  }
  addManifest(manifest) {
    if (this._manifest) {
      console.warn("[Resolver] Manifest already exists, this will be overwritten");
    }
    this._manifest = manifest;
    manifest.bundles.forEach((bundle) => {
      this.addBundle(bundle.name, bundle.assets);
    });
  }
  addBundle(bundleId, assets) {
    const assetNames = [];
    if (Array.isArray(assets)) {
      assets.forEach((asset) => {
        if (typeof asset.name === "string") {
          const bundleAssetId = this._createBundleAssetId(bundleId, asset.name);
          assetNames.push(bundleAssetId);
          this.add([asset.name, bundleAssetId], asset.srcs, asset.data);
        } else {
          const bundleIds = asset.name.map((name) => this._createBundleAssetId(bundleId, name));
          bundleIds.forEach((bundleId2) => {
            assetNames.push(bundleId2);
          });
          this.add([...asset.name, ...bundleIds], asset.srcs);
        }
      });
    } else {
      Object.keys(assets).forEach((key) => {
        assetNames.push(this._createBundleAssetId(bundleId, key));
        this.add([key, this._createBundleAssetId(bundleId, key)], assets[key]);
      });
    }
    this._bundles[bundleId] = assetNames;
  }
  add(keysIn, assetsIn, data) {
    const keys = convertToList.convertToList(keysIn);
    keys.forEach((key) => {
      if (this.hasKey(key)) {
        console.warn(`[Resolver] already has key: ${key} overwriting`);
      }
    });
    if (!Array.isArray(assetsIn)) {
      if (typeof assetsIn === "string") {
        assetsIn = createStringVariations.createStringVariations(assetsIn);
      } else {
        assetsIn = [assetsIn];
      }
    }
    const assetMap = assetsIn.map((asset) => {
      let formattedAsset = asset;
      if (typeof asset === "string") {
        let parsed = false;
        for (let i = 0; i < this._parsers.length; i++) {
          const parser = this._parsers[i];
          if (parser.test(asset)) {
            formattedAsset = parser.parse(asset);
            parsed = true;
            break;
          }
        }
        if (!parsed) {
          formattedAsset = {
            src: asset
          };
        }
      }
      if (!formattedAsset.format) {
        formattedAsset.format = formattedAsset.src.split(".").pop();
      }
      if (!formattedAsset.alias) {
        formattedAsset.alias = keys;
      }
      if (this._basePath || this._rootPath) {
        formattedAsset.src = core.utils.path.toAbsolute(formattedAsset.src, this._basePath, this._rootPath);
      }
      formattedAsset.src = this._appendDefaultSearchParams(formattedAsset.src);
      formattedAsset.data = formattedAsset.data ?? data;
      return formattedAsset;
    });
    keys.forEach((key) => {
      this._assetMap[key] = assetMap;
    });
  }
  resolveBundle(bundleIds) {
    const singleAsset = isSingleItem.isSingleItem(bundleIds);
    bundleIds = convertToList.convertToList(bundleIds);
    const out = {};
    bundleIds.forEach((bundleId) => {
      const assetNames = this._bundles[bundleId];
      if (assetNames) {
        const results = this.resolve(assetNames);
        const assets = {};
        for (const key in results) {
          const asset = results[key];
          assets[this._extractAssetIdFromBundle(bundleId, key)] = asset;
        }
        out[bundleId] = assets;
      }
    });
    return singleAsset ? out[bundleIds[0]] : out;
  }
  resolveUrl(key) {
    const result = this.resolve(key);
    if (typeof key !== "string") {
      const out = {};
      for (const i in result) {
        out[i] = result[i].src;
      }
      return out;
    }
    return result.src;
  }
  resolve(keys) {
    const singleAsset = isSingleItem.isSingleItem(keys);
    keys = convertToList.convertToList(keys);
    const result = {};
    keys.forEach((key) => {
      if (!this._resolverHash[key]) {
        if (this._assetMap[key]) {
          let assets = this._assetMap[key];
          const preferredOrder = this._getPreferredOrder(assets);
          const bestAsset = assets[0];
          preferredOrder?.priority.forEach((priorityKey) => {
            preferredOrder.params[priorityKey].forEach((value) => {
              const filteredAssets = assets.filter((asset) => {
                if (asset[priorityKey]) {
                  return asset[priorityKey] === value;
                }
                return false;
              });
              if (filteredAssets.length) {
                assets = filteredAssets;
              }
            });
          });
          this._resolverHash[key] = assets[0] ?? bestAsset;
        } else {
          let src = key;
          if (this._basePath || this._rootPath) {
            src = core.utils.path.toAbsolute(src, this._basePath, this._rootPath);
          }
          src = this._appendDefaultSearchParams(src);
          this._resolverHash[key] = {
            src
          };
        }
      }
      result[key] = this._resolverHash[key];
    });
    return singleAsset ? result[keys[0]] : result;
  }
  hasKey(key) {
    return !!this._assetMap[key];
  }
  hasBundle(key) {
    return !!this._bundles[key];
  }
  _getPreferredOrder(assets) {
    for (let i = 0; i < assets.length; i++) {
      const asset = assets[0];
      const preferred = this._preferredOrder.find((preference) => preference.params.format.includes(asset.format));
      if (preferred) {
        return preferred;
      }
    }
    return this._preferredOrder[0];
  }
  _appendDefaultSearchParams(url) {
    if (!this._defaultSearchParams)
      return url;
    const paramConnector = /\?/.test(url) ? "&" : "?";
    return `${url}${paramConnector}${this._defaultSearchParams}`;
  }
}

exports.Resolver = Resolver;
//# sourceMappingURL=Resolver.js.map


/***/ }),

/***/ "./node_modules/@pixi/assets/lib/resolver/index.js":
/*!*********************************************************!*\
  !*** ./node_modules/@pixi/assets/lib/resolver/index.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {



__webpack_require__(/*! ./parsers/index.js */ "./node_modules/@pixi/assets/lib/resolver/parsers/index.js");
__webpack_require__(/*! ./types.js */ "./node_modules/@pixi/assets/lib/resolver/types.js");

//# sourceMappingURL=index.js.map


/***/ }),

/***/ "./node_modules/@pixi/assets/lib/resolver/parsers/index.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@pixi/assets/lib/resolver/parsers/index.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {



Object.defineProperty(exports, "__esModule", ({ value: true }));

var resolveTextureUrl = __webpack_require__(/*! ./resolveTextureUrl.js */ "./node_modules/@pixi/assets/lib/resolver/parsers/resolveTextureUrl.js");



exports.resolveTextureUrl = resolveTextureUrl.resolveTextureUrl;
//# sourceMappingURL=index.js.map


/***/ }),

/***/ "./node_modules/@pixi/assets/lib/resolver/parsers/resolveTextureUrl.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@pixi/assets/lib/resolver/parsers/resolveTextureUrl.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {



Object.defineProperty(exports, "__esModule", ({ value: true }));

var core = __webpack_require__(/*! @pixi/core */ "./node_modules/@pixi/core/lib/index.js");
__webpack_require__(/*! ../../loader/index.js */ "./node_modules/@pixi/assets/lib/loader/index.js");
var loadTextures = __webpack_require__(/*! ../../loader/parsers/textures/loadTextures.js */ "./node_modules/@pixi/assets/lib/loader/parsers/textures/loadTextures.js");

const resolveTextureUrl = {
  extension: core.ExtensionType.ResolveParser,
  test: loadTextures.loadTextures.test,
  parse: (value) => ({
    resolution: parseFloat(core.settings.RETINA_PREFIX.exec(value)?.[1] ?? "1"),
    format: value.split(".").pop(),
    src: value
  })
};
core.extensions.add(resolveTextureUrl);

exports.resolveTextureUrl = resolveTextureUrl;
//# sourceMappingURL=resolveTextureUrl.js.map


/***/ }),

/***/ "./node_modules/@pixi/assets/lib/resolver/types.js":
/*!*********************************************************!*\
  !*** ./node_modules/@pixi/assets/lib/resolver/types.js ***!
  \*********************************************************/
/***/ (() => {



//# sourceMappingURL=types.js.map


/***/ }),

/***/ "./node_modules/@pixi/assets/lib/utils/checkDataUrl.js":
/*!*************************************************************!*\
  !*** ./node_modules/@pixi/assets/lib/utils/checkDataUrl.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports) => {



Object.defineProperty(exports, "__esModule", ({ value: true }));

function checkDataUrl(url, mimes) {
  if (Array.isArray(mimes)) {
    for (const mime of mimes) {
      if (url.startsWith(`data:${mime}`))
        return true;
    }
    return false;
  }
  return url.startsWith(`data:${mimes}`);
}

exports.checkDataUrl = checkDataUrl;
//# sourceMappingURL=checkDataUrl.js.map


/***/ }),

/***/ "./node_modules/@pixi/assets/lib/utils/checkExtension.js":
/*!***************************************************************!*\
  !*** ./node_modules/@pixi/assets/lib/utils/checkExtension.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {



Object.defineProperty(exports, "__esModule", ({ value: true }));

var core = __webpack_require__(/*! @pixi/core */ "./node_modules/@pixi/core/lib/index.js");

function checkExtension(url, extension) {
  const tempURL = url.split("?")[0];
  const ext = core.utils.path.extname(tempURL).toLowerCase();
  if (Array.isArray(extension)) {
    return extension.includes(ext);
  }
  return ext === extension;
}

exports.checkExtension = checkExtension;
//# sourceMappingURL=checkExtension.js.map


/***/ }),

/***/ "./node_modules/@pixi/assets/lib/utils/convertToList.js":
/*!**************************************************************!*\
  !*** ./node_modules/@pixi/assets/lib/utils/convertToList.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports) => {



Object.defineProperty(exports, "__esModule", ({ value: true }));

const convertToList = (input, transform) => {
  if (!Array.isArray(input)) {
    input = [input];
  }
  if (!transform) {
    return input;
  }
  return input.map((item) => {
    if (typeof item === "string") {
      return transform(item);
    }
    return item;
  });
};

exports.convertToList = convertToList;
//# sourceMappingURL=convertToList.js.map


/***/ }),

/***/ "./node_modules/@pixi/assets/lib/utils/copySearchParams.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@pixi/assets/lib/utils/copySearchParams.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports) => {



Object.defineProperty(exports, "__esModule", ({ value: true }));

const copySearchParams = (targetUrl, sourceUrl) => {
  const searchParams = sourceUrl.split("?")[1];
  if (searchParams) {
    targetUrl += `?${searchParams}`;
  }
  return targetUrl;
};

exports.copySearchParams = copySearchParams;
//# sourceMappingURL=copySearchParams.js.map


/***/ }),

/***/ "./node_modules/@pixi/assets/lib/utils/createStringVariations.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@pixi/assets/lib/utils/createStringVariations.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports) => {



Object.defineProperty(exports, "__esModule", ({ value: true }));

function processX(base, ids, depth, result, tags) {
  const id = ids[depth];
  for (let i = 0; i < id.length; i++) {
    const value = id[i];
    if (depth < ids.length - 1) {
      processX(base.replace(result[depth], value), ids, depth + 1, result, tags);
    } else {
      tags.push(base.replace(result[depth], value));
    }
  }
}
function createStringVariations(string) {
  const regex = /\{(.*?)\}/g;
  const result = string.match(regex);
  const tags = [];
  if (result) {
    const ids = [];
    result.forEach((vars) => {
      const split = vars.substring(1, vars.length - 1).split(",");
      ids.push(split);
    });
    processX(string, ids, 0, result, tags);
  } else {
    tags.push(string);
  }
  return tags;
}

exports.createStringVariations = createStringVariations;
//# sourceMappingURL=createStringVariations.js.map


/***/ }),

/***/ "./node_modules/@pixi/assets/lib/utils/index.js":
/*!******************************************************!*\
  !*** ./node_modules/@pixi/assets/lib/utils/index.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {



Object.defineProperty(exports, "__esModule", ({ value: true }));

var checkDataUrl = __webpack_require__(/*! ./checkDataUrl.js */ "./node_modules/@pixi/assets/lib/utils/checkDataUrl.js");
var checkExtension = __webpack_require__(/*! ./checkExtension.js */ "./node_modules/@pixi/assets/lib/utils/checkExtension.js");
var convertToList = __webpack_require__(/*! ./convertToList.js */ "./node_modules/@pixi/assets/lib/utils/convertToList.js");
var copySearchParams = __webpack_require__(/*! ./copySearchParams.js */ "./node_modules/@pixi/assets/lib/utils/copySearchParams.js");
var createStringVariations = __webpack_require__(/*! ./createStringVariations.js */ "./node_modules/@pixi/assets/lib/utils/createStringVariations.js");
var isSingleItem = __webpack_require__(/*! ./isSingleItem.js */ "./node_modules/@pixi/assets/lib/utils/isSingleItem.js");



exports.checkDataUrl = checkDataUrl.checkDataUrl;
exports.checkExtension = checkExtension.checkExtension;
exports.convertToList = convertToList.convertToList;
exports.copySearchParams = copySearchParams.copySearchParams;
exports.createStringVariations = createStringVariations.createStringVariations;
exports.isSingleItem = isSingleItem.isSingleItem;
//# sourceMappingURL=index.js.map


/***/ }),

/***/ "./node_modules/@pixi/assets/lib/utils/isSingleItem.js":
/*!*************************************************************!*\
  !*** ./node_modules/@pixi/assets/lib/utils/isSingleItem.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports) => {



Object.defineProperty(exports, "__esModule", ({ value: true }));

const isSingleItem = (item) => !Array.isArray(item);

exports.isSingleItem = isSingleItem;
//# sourceMappingURL=isSingleItem.js.map


/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,