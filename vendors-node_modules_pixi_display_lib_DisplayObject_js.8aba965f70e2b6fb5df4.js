"use strict";
(self["webpackChunkwedding_website"] = self["webpackChunkwedding_website"] || []).push([["vendors-node_modules_pixi_display_lib_DisplayObject_js"],{

/***/ "./node_modules/@pixi/display/lib/DisplayObject.js":
/*!*********************************************************!*\
  !*** ./node_modules/@pixi/display/lib/DisplayObject.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {



Object.defineProperty(exports, "__esModule", ({ value: true }));

var core = __webpack_require__(/*! @pixi/core */ "./node_modules/@pixi/core/lib/index.js");
var Bounds = __webpack_require__(/*! ./Bounds.js */ "./node_modules/@pixi/display/lib/Bounds.js");

class DisplayObject extends core.utils.EventEmitter {
  constructor() {
    super();
    this.tempDisplayObjectParent = null;
    this.transform = new core.Transform();
    this.alpha = 1;
    this.visible = true;
    this.renderable = true;
    this.cullable = false;
    this.cullArea = null;
    this.parent = null;
    this.worldAlpha = 1;
    this._lastSortedIndex = 0;
    this._zIndex = 0;
    this.filterArea = null;
    this.filters = null;
    this._enabledFilters = null;
    this._bounds = new Bounds.Bounds();
    this._localBounds = null;
    this._boundsID = 0;
    this._boundsRect = null;
    this._localBoundsRect = null;
    this._mask = null;
    this._maskRefCount = 0;
    this._destroyed = false;
    this.isSprite = false;
    this.isMask = false;
  }
  static mixin(source) {
    const keys = Object.keys(source);
    for (let i = 0; i < keys.length; ++i) {
      const propertyName = keys[i];
      Object.defineProperty(DisplayObject.prototype, propertyName, Object.getOwnPropertyDescriptor(source, propertyName));
    }
  }
  get destroyed() {
    return this._destroyed;
  }
  _recursivePostUpdateTransform() {
    if (this.parent) {
      this.parent._recursivePostUpdateTransform();
      this.transform.updateTransform(this.parent.transform);
    } else {
      this.transform.updateTransform(this._tempDisplayObjectParent.transform);
    }
  }
  updateTransform() {
    this._boundsID++;
    this.transform.updateTransform(this.parent.transform);
    this.worldAlpha = this.alpha * this.parent.worldAlpha;
  }
  getBounds(skipUpdate, rect) {
    if (!skipUpdate) {
      if (!this.parent) {
        this.parent = this._tempDisplayObjectParent;
        this.updateTransform();
        this.parent = null;
      } else {
        this._recursivePostUpdateTransform();
        this.updateTransform();
      }
    }
    if (this._bounds.updateID !== this._boundsID) {
      this.calculateBounds();
      this._bounds.updateID = this._boundsID;
    }
    if (!rect) {
      if (!this._boundsRect) {
        this._boundsRect = new core.Rectangle();
      }
      rect = this._boundsRect;
    }
    return this._bounds.getRectangle(rect);
  }
  getLocalBounds(rect) {
    if (!rect) {
      if (!this._localBoundsRect) {
        this._localBoundsRect = new core.Rectangle();
      }
      rect = this._localBoundsRect;
    }
    if (!this._localBounds) {
      this._localBounds = new Bounds.Bounds();
    }
    const transformRef = this.transform;
    const parentRef = this.parent;
    this.parent = null;
    this.transform = this._tempDisplayObjectParent.transform;
    const worldBounds = this._bounds;
    const worldBoundsID = this._boundsID;
    this._bounds = this._localBounds;
    const bounds = this.getBounds(false, rect);
    this.parent = parentRef;
    this.transform = transformRef;
    this._bounds = worldBounds;
    this._bounds.updateID += this._boundsID - worldBoundsID;
    return bounds;
  }
  toGlobal(position, point, skipUpdate = false) {
    if (!skipUpdate) {
      this._recursivePostUpdateTransform();
      if (!this.parent) {
        this.parent = this._tempDisplayObjectParent;
        this.displayObjectUpdateTransform();
        this.parent = null;
      } else {
        this.displayObjectUpdateTransform();
      }
    }
    return this.worldTransform.apply(position, point);
  }
  toLocal(position, from, point, skipUpdate) {
    if (from) {
      position = from.toGlobal(position, point, skipUpdate);
    }
    if (!skipUpdate) {
      this._recursivePostUpdateTransform();
      if (!this.parent) {
        this.parent = this._tempDisplayObjectParent;
        this.displayObjectUpdateTransform();
        this.parent = null;
      } else {
        this.displayObjectUpdateTransform();
      }
    }
    return this.worldTransform.applyInverse(position, point);
  }
  setParent(container) {
    if (!container || !container.addChild) {
      throw new Error("setParent: Argument must be a Container");
    }
    container.addChild(this);
    return container;
  }
  removeFromParent() {
    this.parent?.removeChild(this);
  }
  setTransform(x = 0, y = 0, scaleX = 1, scaleY = 1, rotation = 0, skewX = 0, skewY = 0, pivotX = 0, pivotY = 0) {
    this.position.x = x;
    this.position.y = y;
    this.scale.x = !scaleX ? 1 : scaleX;
    this.scale.y = !scaleY ? 1 : scaleY;
    this.rotation = rotation;
    this.skew.x = skewX;
    this.skew.y = skewY;
    this.pivot.x = pivotX;
    this.pivot.y = pivotY;
    return this;
  }
  destroy(_options) {
    this.removeFromParent();
    this._destroyed = true;
    this.transform = null;
    this.parent = null;
    this._bounds = null;
    this.mask = null;
    this.cullArea = null;
    this.filters = null;
    this.filterArea = null;
    this.hitArea = null;
    this.eventMode = "auto";
    this.interactiveChildren = false;
    this.emit("destroyed");
    this.removeAllListeners();
  }
  get _tempDisplayObjectParent() {
    if (this.tempDisplayObjectParent === null) {
      this.tempDisplayObjectParent = new TemporaryDisplayObject();
    }
    return this.tempDisplayObjectParent;
  }
  enableTempParent() {
    const myParent = this.parent;
    this.parent = this._tempDisplayObjectParent;
    return myParent;
  }
  disableTempParent(cacheParent) {
    this.parent = cacheParent;
  }
  get x() {
    return this.position.x;
  }
  set x(value) {
    this.transform.position.x = value;
  }
  get y() {
    return this.position.y;
  }
  set y(value) {
    this.transform.position.y = value;
  }
  get worldTransform() {
    return this.transform.worldTransform;
  }
  get localTransform() {
    return this.transform.localTransform;
  }
  get position() {
    return this.transform.position;
  }
  set position(value) {
    this.transform.position.copyFrom(value);
  }
  get scale() {
    return this.transform.scale;
  }
  set scale(value) {
    this.transform.scale.copyFrom(value);
  }
  get pivot() {
    return this.transform.pivot;
  }
  set pivot(value) {
    this.transform.pivot.copyFrom(value);
  }
  get skew() {
    return this.transform.skew;
  }
  set skew(value) {
    this.transform.skew.copyFrom(value);
  }
  get rotation() {
    return this.transform.rotation;
  }
  set rotation(value) {
    this.transform.rotation = value;
  }
  get angle() {
    return this.transform.rotation * core.RAD_TO_DEG;
  }
  set angle(value) {
    this.transform.rotation = value * core.DEG_TO_RAD;
  }
  get zIndex() {
    return this._zIndex;
  }
  set zIndex(value) {
    this._zIndex = value;
    if (this.parent) {
      this.parent.sortDirty = true;
    }
  }
  get worldVisible() {
    let item = this;
    do {
      if (!item.visible) {
        return false;
      }
      item = item.parent;
    } while (item);
    return true;
  }
  get mask() {
    return this._mask;
  }
  set mask(value) {
    if (this._mask === value) {
      return;
    }
    if (this._mask) {
      const maskObject = this._mask.isMaskData ? this._mask.maskObject : this._mask;
      if (maskObject) {
        maskObject._maskRefCount--;
        if (maskObject._maskRefCount === 0) {
          maskObject.renderable = true;
          maskObject.isMask = false;
        }
      }
    }
    this._mask = value;
    if (this._mask) {
      const maskObject = this._mask.isMaskData ? this._mask.maskObject : this._mask;
      if (maskObject) {
        if (maskObject._maskRefCount === 0) {
          maskObject.renderable = false;
          maskObject.isMask = true;
        }
        maskObject._maskRefCount++;
      }
    }
  }
}
class TemporaryDisplayObject extends DisplayObject {
  constructor() {
    super(...arguments);
    this.sortDirty = null;
  }
}
DisplayObject.prototype.displayObjectUpdateTransform = DisplayObject.prototype.updateTransform;

exports.DisplayObject = DisplayObject;
exports.TemporaryDisplayObject = TemporaryDisplayObject;
//# sourceMappingURL=DisplayObject.js.map


/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmVuZG9ycy1ub2RlX21vZHVsZXNfcGl4aV9kaXNwbGF5X2xpYl9EaXNwbGF5T2JqZWN0X2pzLjhhYmE5NjVmNzBlMmI2ZmI1ZGY0LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFhOztBQUViLDhDQUE2QyxFQUFFLGFBQWEsRUFBQzs7QUFFN0QsV0FBVyxtQkFBTyxDQUFDLDBEQUFZO0FBQy9CLGFBQWEsbUJBQU8sQ0FBQywrREFBYTs7QUFFbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLGlCQUFpQjtBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLHFCQUFxQjtBQUNyQiw4QkFBOEI7QUFDOUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93ZWRkaW5nLXdlYnNpdGUvLi9ub2RlX21vZHVsZXMvQHBpeGkvZGlzcGxheS9saWIvRGlzcGxheU9iamVjdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbnZhciBjb3JlID0gcmVxdWlyZSgnQHBpeGkvY29yZScpO1xudmFyIEJvdW5kcyA9IHJlcXVpcmUoJy4vQm91bmRzLmpzJyk7XG5cbmNsYXNzIERpc3BsYXlPYmplY3QgZXh0ZW5kcyBjb3JlLnV0aWxzLkV2ZW50RW1pdHRlciB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy50ZW1wRGlzcGxheU9iamVjdFBhcmVudCA9IG51bGw7XG4gICAgdGhpcy50cmFuc2Zvcm0gPSBuZXcgY29yZS5UcmFuc2Zvcm0oKTtcbiAgICB0aGlzLmFscGhhID0gMTtcbiAgICB0aGlzLnZpc2libGUgPSB0cnVlO1xuICAgIHRoaXMucmVuZGVyYWJsZSA9IHRydWU7XG4gICAgdGhpcy5jdWxsYWJsZSA9IGZhbHNlO1xuICAgIHRoaXMuY3VsbEFyZWEgPSBudWxsO1xuICAgIHRoaXMucGFyZW50ID0gbnVsbDtcbiAgICB0aGlzLndvcmxkQWxwaGEgPSAxO1xuICAgIHRoaXMuX2xhc3RTb3J0ZWRJbmRleCA9IDA7XG4gICAgdGhpcy5fekluZGV4ID0gMDtcbiAgICB0aGlzLmZpbHRlckFyZWEgPSBudWxsO1xuICAgIHRoaXMuZmlsdGVycyA9IG51bGw7XG4gICAgdGhpcy5fZW5hYmxlZEZpbHRlcnMgPSBudWxsO1xuICAgIHRoaXMuX2JvdW5kcyA9IG5ldyBCb3VuZHMuQm91bmRzKCk7XG4gICAgdGhpcy5fbG9jYWxCb3VuZHMgPSBudWxsO1xuICAgIHRoaXMuX2JvdW5kc0lEID0gMDtcbiAgICB0aGlzLl9ib3VuZHNSZWN0ID0gbnVsbDtcbiAgICB0aGlzLl9sb2NhbEJvdW5kc1JlY3QgPSBudWxsO1xuICAgIHRoaXMuX21hc2sgPSBudWxsO1xuICAgIHRoaXMuX21hc2tSZWZDb3VudCA9IDA7XG4gICAgdGhpcy5fZGVzdHJveWVkID0gZmFsc2U7XG4gICAgdGhpcy5pc1Nwcml0ZSA9IGZhbHNlO1xuICAgIHRoaXMuaXNNYXNrID0gZmFsc2U7XG4gIH1cbiAgc3RhdGljIG1peGluKHNvdXJjZSkge1xuICAgIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhzb3VyY2UpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7ICsraSkge1xuICAgICAgY29uc3QgcHJvcGVydHlOYW1lID0ga2V5c1tpXTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShEaXNwbGF5T2JqZWN0LnByb3RvdHlwZSwgcHJvcGVydHlOYW1lLCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwgcHJvcGVydHlOYW1lKSk7XG4gICAgfVxuICB9XG4gIGdldCBkZXN0cm95ZWQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2Rlc3Ryb3llZDtcbiAgfVxuICBfcmVjdXJzaXZlUG9zdFVwZGF0ZVRyYW5zZm9ybSgpIHtcbiAgICBpZiAodGhpcy5wYXJlbnQpIHtcbiAgICAgIHRoaXMucGFyZW50Ll9yZWN1cnNpdmVQb3N0VXBkYXRlVHJhbnNmb3JtKCk7XG4gICAgICB0aGlzLnRyYW5zZm9ybS51cGRhdGVUcmFuc2Zvcm0odGhpcy5wYXJlbnQudHJhbnNmb3JtKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy50cmFuc2Zvcm0udXBkYXRlVHJhbnNmb3JtKHRoaXMuX3RlbXBEaXNwbGF5T2JqZWN0UGFyZW50LnRyYW5zZm9ybSk7XG4gICAgfVxuICB9XG4gIHVwZGF0ZVRyYW5zZm9ybSgpIHtcbiAgICB0aGlzLl9ib3VuZHNJRCsrO1xuICAgIHRoaXMudHJhbnNmb3JtLnVwZGF0ZVRyYW5zZm9ybSh0aGlzLnBhcmVudC50cmFuc2Zvcm0pO1xuICAgIHRoaXMud29ybGRBbHBoYSA9IHRoaXMuYWxwaGEgKiB0aGlzLnBhcmVudC53b3JsZEFscGhhO1xuICB9XG4gIGdldEJvdW5kcyhza2lwVXBkYXRlLCByZWN0KSB7XG4gICAgaWYgKCFza2lwVXBkYXRlKSB7XG4gICAgICBpZiAoIXRoaXMucGFyZW50KSB7XG4gICAgICAgIHRoaXMucGFyZW50ID0gdGhpcy5fdGVtcERpc3BsYXlPYmplY3RQYXJlbnQ7XG4gICAgICAgIHRoaXMudXBkYXRlVHJhbnNmb3JtKCk7XG4gICAgICAgIHRoaXMucGFyZW50ID0gbnVsbDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuX3JlY3Vyc2l2ZVBvc3RVcGRhdGVUcmFuc2Zvcm0oKTtcbiAgICAgICAgdGhpcy51cGRhdGVUcmFuc2Zvcm0oKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHRoaXMuX2JvdW5kcy51cGRhdGVJRCAhPT0gdGhpcy5fYm91bmRzSUQpIHtcbiAgICAgIHRoaXMuY2FsY3VsYXRlQm91bmRzKCk7XG4gICAgICB0aGlzLl9ib3VuZHMudXBkYXRlSUQgPSB0aGlzLl9ib3VuZHNJRDtcbiAgICB9XG4gICAgaWYgKCFyZWN0KSB7XG4gICAgICBpZiAoIXRoaXMuX2JvdW5kc1JlY3QpIHtcbiAgICAgICAgdGhpcy5fYm91bmRzUmVjdCA9IG5ldyBjb3JlLlJlY3RhbmdsZSgpO1xuICAgICAgfVxuICAgICAgcmVjdCA9IHRoaXMuX2JvdW5kc1JlY3Q7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9ib3VuZHMuZ2V0UmVjdGFuZ2xlKHJlY3QpO1xuICB9XG4gIGdldExvY2FsQm91bmRzKHJlY3QpIHtcbiAgICBpZiAoIXJlY3QpIHtcbiAgICAgIGlmICghdGhpcy5fbG9jYWxCb3VuZHNSZWN0KSB7XG4gICAgICAgIHRoaXMuX2xvY2FsQm91bmRzUmVjdCA9IG5ldyBjb3JlLlJlY3RhbmdsZSgpO1xuICAgICAgfVxuICAgICAgcmVjdCA9IHRoaXMuX2xvY2FsQm91bmRzUmVjdDtcbiAgICB9XG4gICAgaWYgKCF0aGlzLl9sb2NhbEJvdW5kcykge1xuICAgICAgdGhpcy5fbG9jYWxCb3VuZHMgPSBuZXcgQm91bmRzLkJvdW5kcygpO1xuICAgIH1cbiAgICBjb25zdCB0cmFuc2Zvcm1SZWYgPSB0aGlzLnRyYW5zZm9ybTtcbiAgICBjb25zdCBwYXJlbnRSZWYgPSB0aGlzLnBhcmVudDtcbiAgICB0aGlzLnBhcmVudCA9IG51bGw7XG4gICAgdGhpcy50cmFuc2Zvcm0gPSB0aGlzLl90ZW1wRGlzcGxheU9iamVjdFBhcmVudC50cmFuc2Zvcm07XG4gICAgY29uc3Qgd29ybGRCb3VuZHMgPSB0aGlzLl9ib3VuZHM7XG4gICAgY29uc3Qgd29ybGRCb3VuZHNJRCA9IHRoaXMuX2JvdW5kc0lEO1xuICAgIHRoaXMuX2JvdW5kcyA9IHRoaXMuX2xvY2FsQm91bmRzO1xuICAgIGNvbnN0IGJvdW5kcyA9IHRoaXMuZ2V0Qm91bmRzKGZhbHNlLCByZWN0KTtcbiAgICB0aGlzLnBhcmVudCA9IHBhcmVudFJlZjtcbiAgICB0aGlzLnRyYW5zZm9ybSA9IHRyYW5zZm9ybVJlZjtcbiAgICB0aGlzLl9ib3VuZHMgPSB3b3JsZEJvdW5kcztcbiAgICB0aGlzLl9ib3VuZHMudXBkYXRlSUQgKz0gdGhpcy5fYm91bmRzSUQgLSB3b3JsZEJvdW5kc0lEO1xuICAgIHJldHVybiBib3VuZHM7XG4gIH1cbiAgdG9HbG9iYWwocG9zaXRpb24sIHBvaW50LCBza2lwVXBkYXRlID0gZmFsc2UpIHtcbiAgICBpZiAoIXNraXBVcGRhdGUpIHtcbiAgICAgIHRoaXMuX3JlY3Vyc2l2ZVBvc3RVcGRhdGVUcmFuc2Zvcm0oKTtcbiAgICAgIGlmICghdGhpcy5wYXJlbnQpIHtcbiAgICAgICAgdGhpcy5wYXJlbnQgPSB0aGlzLl90ZW1wRGlzcGxheU9iamVjdFBhcmVudDtcbiAgICAgICAgdGhpcy5kaXNwbGF5T2JqZWN0VXBkYXRlVHJhbnNmb3JtKCk7XG4gICAgICAgIHRoaXMucGFyZW50ID0gbnVsbDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuZGlzcGxheU9iamVjdFVwZGF0ZVRyYW5zZm9ybSgpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGhpcy53b3JsZFRyYW5zZm9ybS5hcHBseShwb3NpdGlvbiwgcG9pbnQpO1xuICB9XG4gIHRvTG9jYWwocG9zaXRpb24sIGZyb20sIHBvaW50LCBza2lwVXBkYXRlKSB7XG4gICAgaWYgKGZyb20pIHtcbiAgICAgIHBvc2l0aW9uID0gZnJvbS50b0dsb2JhbChwb3NpdGlvbiwgcG9pbnQsIHNraXBVcGRhdGUpO1xuICAgIH1cbiAgICBpZiAoIXNraXBVcGRhdGUpIHtcbiAgICAgIHRoaXMuX3JlY3Vyc2l2ZVBvc3RVcGRhdGVUcmFuc2Zvcm0oKTtcbiAgICAgIGlmICghdGhpcy5wYXJlbnQpIHtcbiAgICAgICAgdGhpcy5wYXJlbnQgPSB0aGlzLl90ZW1wRGlzcGxheU9iamVjdFBhcmVudDtcbiAgICAgICAgdGhpcy5kaXNwbGF5T2JqZWN0VXBkYXRlVHJhbnNmb3JtKCk7XG4gICAgICAgIHRoaXMucGFyZW50ID0gbnVsbDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuZGlzcGxheU9iamVjdFVwZGF0ZVRyYW5zZm9ybSgpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGhpcy53b3JsZFRyYW5zZm9ybS5hcHBseUludmVyc2UocG9zaXRpb24sIHBvaW50KTtcbiAgfVxuICBzZXRQYXJlbnQoY29udGFpbmVyKSB7XG4gICAgaWYgKCFjb250YWluZXIgfHwgIWNvbnRhaW5lci5hZGRDaGlsZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwic2V0UGFyZW50OiBBcmd1bWVudCBtdXN0IGJlIGEgQ29udGFpbmVyXCIpO1xuICAgIH1cbiAgICBjb250YWluZXIuYWRkQ2hpbGQodGhpcyk7XG4gICAgcmV0dXJuIGNvbnRhaW5lcjtcbiAgfVxuICByZW1vdmVGcm9tUGFyZW50KCkge1xuICAgIHRoaXMucGFyZW50Py5yZW1vdmVDaGlsZCh0aGlzKTtcbiAgfVxuICBzZXRUcmFuc2Zvcm0oeCA9IDAsIHkgPSAwLCBzY2FsZVggPSAxLCBzY2FsZVkgPSAxLCByb3RhdGlvbiA9IDAsIHNrZXdYID0gMCwgc2tld1kgPSAwLCBwaXZvdFggPSAwLCBwaXZvdFkgPSAwKSB7XG4gICAgdGhpcy5wb3NpdGlvbi54ID0geDtcbiAgICB0aGlzLnBvc2l0aW9uLnkgPSB5O1xuICAgIHRoaXMuc2NhbGUueCA9ICFzY2FsZVggPyAxIDogc2NhbGVYO1xuICAgIHRoaXMuc2NhbGUueSA9ICFzY2FsZVkgPyAxIDogc2NhbGVZO1xuICAgIHRoaXMucm90YXRpb24gPSByb3RhdGlvbjtcbiAgICB0aGlzLnNrZXcueCA9IHNrZXdYO1xuICAgIHRoaXMuc2tldy55ID0gc2tld1k7XG4gICAgdGhpcy5waXZvdC54ID0gcGl2b3RYO1xuICAgIHRoaXMucGl2b3QueSA9IHBpdm90WTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICBkZXN0cm95KF9vcHRpb25zKSB7XG4gICAgdGhpcy5yZW1vdmVGcm9tUGFyZW50KCk7XG4gICAgdGhpcy5fZGVzdHJveWVkID0gdHJ1ZTtcbiAgICB0aGlzLnRyYW5zZm9ybSA9IG51bGw7XG4gICAgdGhpcy5wYXJlbnQgPSBudWxsO1xuICAgIHRoaXMuX2JvdW5kcyA9IG51bGw7XG4gICAgdGhpcy5tYXNrID0gbnVsbDtcbiAgICB0aGlzLmN1bGxBcmVhID0gbnVsbDtcbiAgICB0aGlzLmZpbHRlcnMgPSBudWxsO1xuICAgIHRoaXMuZmlsdGVyQXJlYSA9IG51bGw7XG4gICAgdGhpcy5oaXRBcmVhID0gbnVsbDtcbiAgICB0aGlzLmV2ZW50TW9kZSA9IFwiYXV0b1wiO1xuICAgIHRoaXMuaW50ZXJhY3RpdmVDaGlsZHJlbiA9IGZhbHNlO1xuICAgIHRoaXMuZW1pdChcImRlc3Ryb3llZFwiKTtcbiAgICB0aGlzLnJlbW92ZUFsbExpc3RlbmVycygpO1xuICB9XG4gIGdldCBfdGVtcERpc3BsYXlPYmplY3RQYXJlbnQoKSB7XG4gICAgaWYgKHRoaXMudGVtcERpc3BsYXlPYmplY3RQYXJlbnQgPT09IG51bGwpIHtcbiAgICAgIHRoaXMudGVtcERpc3BsYXlPYmplY3RQYXJlbnQgPSBuZXcgVGVtcG9yYXJ5RGlzcGxheU9iamVjdCgpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy50ZW1wRGlzcGxheU9iamVjdFBhcmVudDtcbiAgfVxuICBlbmFibGVUZW1wUGFyZW50KCkge1xuICAgIGNvbnN0IG15UGFyZW50ID0gdGhpcy5wYXJlbnQ7XG4gICAgdGhpcy5wYXJlbnQgPSB0aGlzLl90ZW1wRGlzcGxheU9iamVjdFBhcmVudDtcbiAgICByZXR1cm4gbXlQYXJlbnQ7XG4gIH1cbiAgZGlzYWJsZVRlbXBQYXJlbnQoY2FjaGVQYXJlbnQpIHtcbiAgICB0aGlzLnBhcmVudCA9IGNhY2hlUGFyZW50O1xuICB9XG4gIGdldCB4KCkge1xuICAgIHJldHVybiB0aGlzLnBvc2l0aW9uLng7XG4gIH1cbiAgc2V0IHgodmFsdWUpIHtcbiAgICB0aGlzLnRyYW5zZm9ybS5wb3NpdGlvbi54ID0gdmFsdWU7XG4gIH1cbiAgZ2V0IHkoKSB7XG4gICAgcmV0dXJuIHRoaXMucG9zaXRpb24ueTtcbiAgfVxuICBzZXQgeSh2YWx1ZSkge1xuICAgIHRoaXMudHJhbnNmb3JtLnBvc2l0aW9uLnkgPSB2YWx1ZTtcbiAgfVxuICBnZXQgd29ybGRUcmFuc2Zvcm0oKSB7XG4gICAgcmV0dXJuIHRoaXMudHJhbnNmb3JtLndvcmxkVHJhbnNmb3JtO1xuICB9XG4gIGdldCBsb2NhbFRyYW5zZm9ybSgpIHtcbiAgICByZXR1cm4gdGhpcy50cmFuc2Zvcm0ubG9jYWxUcmFuc2Zvcm07XG4gIH1cbiAgZ2V0IHBvc2l0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLnRyYW5zZm9ybS5wb3NpdGlvbjtcbiAgfVxuICBzZXQgcG9zaXRpb24odmFsdWUpIHtcbiAgICB0aGlzLnRyYW5zZm9ybS5wb3NpdGlvbi5jb3B5RnJvbSh2YWx1ZSk7XG4gIH1cbiAgZ2V0IHNjYWxlKCkge1xuICAgIHJldHVybiB0aGlzLnRyYW5zZm9ybS5zY2FsZTtcbiAgfVxuICBzZXQgc2NhbGUodmFsdWUpIHtcbiAgICB0aGlzLnRyYW5zZm9ybS5zY2FsZS5jb3B5RnJvbSh2YWx1ZSk7XG4gIH1cbiAgZ2V0IHBpdm90KCkge1xuICAgIHJldHVybiB0aGlzLnRyYW5zZm9ybS5waXZvdDtcbiAgfVxuICBzZXQgcGl2b3QodmFsdWUpIHtcbiAgICB0aGlzLnRyYW5zZm9ybS5waXZvdC5jb3B5RnJvbSh2YWx1ZSk7XG4gIH1cbiAgZ2V0IHNrZXcoKSB7XG4gICAgcmV0dXJuIHRoaXMudHJhbnNmb3JtLnNrZXc7XG4gIH1cbiAgc2V0IHNrZXcodmFsdWUpIHtcbiAgICB0aGlzLnRyYW5zZm9ybS5za2V3LmNvcHlGcm9tKHZhbHVlKTtcbiAgfVxuICBnZXQgcm90YXRpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMudHJhbnNmb3JtLnJvdGF0aW9uO1xuICB9XG4gIHNldCByb3RhdGlvbih2YWx1ZSkge1xuICAgIHRoaXMudHJhbnNmb3JtLnJvdGF0aW9uID0gdmFsdWU7XG4gIH1cbiAgZ2V0IGFuZ2xlKCkge1xuICAgIHJldHVybiB0aGlzLnRyYW5zZm9ybS5yb3RhdGlvbiAqIGNvcmUuUkFEX1RPX0RFRztcbiAgfVxuICBzZXQgYW5nbGUodmFsdWUpIHtcbiAgICB0aGlzLnRyYW5zZm9ybS5yb3RhdGlvbiA9IHZhbHVlICogY29yZS5ERUdfVE9fUkFEO1xuICB9XG4gIGdldCB6SW5kZXgoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3pJbmRleDtcbiAgfVxuICBzZXQgekluZGV4KHZhbHVlKSB7XG4gICAgdGhpcy5fekluZGV4ID0gdmFsdWU7XG4gICAgaWYgKHRoaXMucGFyZW50KSB7XG4gICAgICB0aGlzLnBhcmVudC5zb3J0RGlydHkgPSB0cnVlO1xuICAgIH1cbiAgfVxuICBnZXQgd29ybGRWaXNpYmxlKCkge1xuICAgIGxldCBpdGVtID0gdGhpcztcbiAgICBkbyB7XG4gICAgICBpZiAoIWl0ZW0udmlzaWJsZSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICBpdGVtID0gaXRlbS5wYXJlbnQ7XG4gICAgfSB3aGlsZSAoaXRlbSk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgZ2V0IG1hc2soKSB7XG4gICAgcmV0dXJuIHRoaXMuX21hc2s7XG4gIH1cbiAgc2V0IG1hc2sodmFsdWUpIHtcbiAgICBpZiAodGhpcy5fbWFzayA9PT0gdmFsdWUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKHRoaXMuX21hc2spIHtcbiAgICAgIGNvbnN0IG1hc2tPYmplY3QgPSB0aGlzLl9tYXNrLmlzTWFza0RhdGEgPyB0aGlzLl9tYXNrLm1hc2tPYmplY3QgOiB0aGlzLl9tYXNrO1xuICAgICAgaWYgKG1hc2tPYmplY3QpIHtcbiAgICAgICAgbWFza09iamVjdC5fbWFza1JlZkNvdW50LS07XG4gICAgICAgIGlmIChtYXNrT2JqZWN0Ll9tYXNrUmVmQ291bnQgPT09IDApIHtcbiAgICAgICAgICBtYXNrT2JqZWN0LnJlbmRlcmFibGUgPSB0cnVlO1xuICAgICAgICAgIG1hc2tPYmplY3QuaXNNYXNrID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5fbWFzayA9IHZhbHVlO1xuICAgIGlmICh0aGlzLl9tYXNrKSB7XG4gICAgICBjb25zdCBtYXNrT2JqZWN0ID0gdGhpcy5fbWFzay5pc01hc2tEYXRhID8gdGhpcy5fbWFzay5tYXNrT2JqZWN0IDogdGhpcy5fbWFzaztcbiAgICAgIGlmIChtYXNrT2JqZWN0KSB7XG4gICAgICAgIGlmIChtYXNrT2JqZWN0Ll9tYXNrUmVmQ291bnQgPT09IDApIHtcbiAgICAgICAgICBtYXNrT2JqZWN0LnJlbmRlcmFibGUgPSBmYWxzZTtcbiAgICAgICAgICBtYXNrT2JqZWN0LmlzTWFzayA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgbWFza09iamVjdC5fbWFza1JlZkNvdW50Kys7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5jbGFzcyBUZW1wb3JhcnlEaXNwbGF5T2JqZWN0IGV4dGVuZHMgRGlzcGxheU9iamVjdCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgdGhpcy5zb3J0RGlydHkgPSBudWxsO1xuICB9XG59XG5EaXNwbGF5T2JqZWN0LnByb3RvdHlwZS5kaXNwbGF5T2JqZWN0VXBkYXRlVHJhbnNmb3JtID0gRGlzcGxheU9iamVjdC5wcm90b3R5cGUudXBkYXRlVHJhbnNmb3JtO1xuXG5leHBvcnRzLkRpc3BsYXlPYmplY3QgPSBEaXNwbGF5T2JqZWN0O1xuZXhwb3J0cy5UZW1wb3JhcnlEaXNwbGF5T2JqZWN0ID0gVGVtcG9yYXJ5RGlzcGxheU9iamVjdDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPURpc3BsYXlPYmplY3QuanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=