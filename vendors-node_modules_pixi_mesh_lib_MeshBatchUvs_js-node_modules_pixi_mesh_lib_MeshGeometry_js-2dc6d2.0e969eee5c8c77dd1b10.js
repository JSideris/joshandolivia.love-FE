"use strict";
(self["webpackChunkwedding_website"] = self["webpackChunkwedding_website"] || []).push([["vendors-node_modules_pixi_mesh_lib_MeshBatchUvs_js-node_modules_pixi_mesh_lib_MeshGeometry_js-2dc6d2"],{

/***/ "./node_modules/@pixi/mesh/lib/MeshBatchUvs.js":
/*!*****************************************************!*\
  !*** ./node_modules/@pixi/mesh/lib/MeshBatchUvs.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports) => {



Object.defineProperty(exports, "__esModule", ({ value: true }));

class MeshBatchUvs {
  constructor(uvBuffer, uvMatrix) {
    this.uvBuffer = uvBuffer;
    this.uvMatrix = uvMatrix;
    this.data = null;
    this._bufferUpdateId = -1;
    this._textureUpdateId = -1;
    this._updateID = 0;
  }
  update(forceUpdate) {
    if (!forceUpdate && this._bufferUpdateId === this.uvBuffer._updateID && this._textureUpdateId === this.uvMatrix._updateID) {
      return;
    }
    this._bufferUpdateId = this.uvBuffer._updateID;
    this._textureUpdateId = this.uvMatrix._updateID;
    const data = this.uvBuffer.data;
    if (!this.data || this.data.length !== data.length) {
      this.data = new Float32Array(data.length);
    }
    this.uvMatrix.multiplyUvs(data, this.data);
    this._updateID++;
  }
}

exports.MeshBatchUvs = MeshBatchUvs;
//# sourceMappingURL=MeshBatchUvs.js.map


/***/ }),

/***/ "./node_modules/@pixi/mesh/lib/MeshGeometry.js":
/*!*****************************************************!*\
  !*** ./node_modules/@pixi/mesh/lib/MeshGeometry.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {



Object.defineProperty(exports, "__esModule", ({ value: true }));

var core = __webpack_require__(/*! @pixi/core */ "./node_modules/@pixi/core/lib/index.js");

class MeshGeometry extends core.Geometry {
  constructor(vertices, uvs, index) {
    super();
    const verticesBuffer = new core.Buffer(vertices);
    const uvsBuffer = new core.Buffer(uvs, true);
    const indexBuffer = new core.Buffer(index, true, true);
    this.addAttribute("aVertexPosition", verticesBuffer, 2, false, core.TYPES.FLOAT).addAttribute("aTextureCoord", uvsBuffer, 2, false, core.TYPES.FLOAT).addIndex(indexBuffer);
    this._updateId = -1;
  }
  get vertexDirtyId() {
    return this.buffers[0]._updateID;
  }
}

exports.MeshGeometry = MeshGeometry;
//# sourceMappingURL=MeshGeometry.js.map


/***/ }),

/***/ "./node_modules/@pixi/mesh/lib/MeshMaterial.js":
/*!*****************************************************!*\
  !*** ./node_modules/@pixi/mesh/lib/MeshMaterial.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {



Object.defineProperty(exports, "__esModule", ({ value: true }));

var core = __webpack_require__(/*! @pixi/core */ "./node_modules/@pixi/core/lib/index.js");
var mesh$1 = __webpack_require__(/*! ./shader/mesh.js */ "./node_modules/@pixi/mesh/lib/shader/mesh.js");
var mesh = __webpack_require__(/*! ./shader/mesh2.js */ "./node_modules/@pixi/mesh/lib/shader/mesh2.js");

class MeshMaterial extends core.Shader {
  constructor(uSampler, options) {
    const uniforms = {
      uSampler,
      alpha: 1,
      uTextureMatrix: core.Matrix.IDENTITY,
      uColor: new Float32Array([1, 1, 1, 1])
    };
    options = Object.assign({
      tint: 16777215,
      alpha: 1,
      pluginName: "batch"
    }, options);
    if (options.uniforms) {
      Object.assign(uniforms, options.uniforms);
    }
    super(options.program || core.Program.from(mesh["default"], mesh$1["default"]), uniforms);
    this._colorDirty = false;
    this.uvMatrix = new core.TextureMatrix(uSampler);
    this.batchable = options.program === void 0;
    this.pluginName = options.pluginName;
    this._tintColor = new core.Color(options.tint);
    this._tintRGB = this._tintColor.toLittleEndianNumber();
    this._colorDirty = true;
    this.alpha = options.alpha;
  }
  get texture() {
    return this.uniforms.uSampler;
  }
  set texture(value) {
    if (this.uniforms.uSampler !== value) {
      if (!this.uniforms.uSampler.baseTexture.alphaMode !== !value.baseTexture.alphaMode) {
        this._colorDirty = true;
      }
      this.uniforms.uSampler = value;
      this.uvMatrix.texture = value;
    }
  }
  set alpha(value) {
    if (value === this._alpha)
      return;
    this._alpha = value;
    this._colorDirty = true;
  }
  get alpha() {
    return this._alpha;
  }
  set tint(value) {
    if (value === this.tint)
      return;
    this._tintColor.setValue(value);
    this._tintRGB = this._tintColor.toLittleEndianNumber();
    this._colorDirty = true;
  }
  get tint() {
    return this._tintColor.value;
  }
  get tintValue() {
    return this._tintColor.toNumber();
  }
  update() {
    if (this._colorDirty) {
      this._colorDirty = false;
      const baseTexture = this.texture.baseTexture;
      const applyToChannels = baseTexture.alphaMode;
      core.Color.shared.setValue(this._tintColor).premultiply(this._alpha, applyToChannels).toArray(this.uniforms.uColor);
    }
    if (this.uvMatrix.update()) {
      this.uniforms.uTextureMatrix = this.uvMatrix.mapCoord;
    }
  }
}

exports.MeshMaterial = MeshMaterial;
//# sourceMappingURL=MeshMaterial.js.map


/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmVuZG9ycy1ub2RlX21vZHVsZXNfcGl4aV9tZXNoX2xpYl9NZXNoQmF0Y2hVdnNfanMtbm9kZV9tb2R1bGVzX3BpeGlfbWVzaF9saWJfTWVzaEdlb21ldHJ5X2pzLTJkYzZkMi4wZTk2OWVlZTVjOGM3N2RkMWIxMC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBYTs7QUFFYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7O0FBRTdEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsb0JBQW9CO0FBQ3BCOzs7Ozs7Ozs7OztBQzdCYTs7QUFFYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7O0FBRTdELFdBQVcsbUJBQU8sQ0FBQywwREFBWTs7QUFFL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsb0JBQW9CO0FBQ3BCOzs7Ozs7Ozs7OztBQ3JCYTs7QUFFYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7O0FBRTdELFdBQVcsbUJBQU8sQ0FBQywwREFBWTtBQUMvQixhQUFhLG1CQUFPLENBQUMsc0VBQWtCO0FBQ3ZDLFdBQVcsbUJBQU8sQ0FBQyx3RUFBbUI7O0FBRXRDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLG9CQUFvQjtBQUNwQiIsInNvdXJjZXMiOlsid2VicGFjazovL3dlZGRpbmctd2Vic2l0ZS8uL25vZGVfbW9kdWxlcy9AcGl4aS9tZXNoL2xpYi9NZXNoQmF0Y2hVdnMuanMiLCJ3ZWJwYWNrOi8vd2VkZGluZy13ZWJzaXRlLy4vbm9kZV9tb2R1bGVzL0BwaXhpL21lc2gvbGliL01lc2hHZW9tZXRyeS5qcyIsIndlYnBhY2s6Ly93ZWRkaW5nLXdlYnNpdGUvLi9ub2RlX21vZHVsZXMvQHBpeGkvbWVzaC9saWIvTWVzaE1hdGVyaWFsLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxuY2xhc3MgTWVzaEJhdGNoVXZzIHtcbiAgY29uc3RydWN0b3IodXZCdWZmZXIsIHV2TWF0cml4KSB7XG4gICAgdGhpcy51dkJ1ZmZlciA9IHV2QnVmZmVyO1xuICAgIHRoaXMudXZNYXRyaXggPSB1dk1hdHJpeDtcbiAgICB0aGlzLmRhdGEgPSBudWxsO1xuICAgIHRoaXMuX2J1ZmZlclVwZGF0ZUlkID0gLTE7XG4gICAgdGhpcy5fdGV4dHVyZVVwZGF0ZUlkID0gLTE7XG4gICAgdGhpcy5fdXBkYXRlSUQgPSAwO1xuICB9XG4gIHVwZGF0ZShmb3JjZVVwZGF0ZSkge1xuICAgIGlmICghZm9yY2VVcGRhdGUgJiYgdGhpcy5fYnVmZmVyVXBkYXRlSWQgPT09IHRoaXMudXZCdWZmZXIuX3VwZGF0ZUlEICYmIHRoaXMuX3RleHR1cmVVcGRhdGVJZCA9PT0gdGhpcy51dk1hdHJpeC5fdXBkYXRlSUQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5fYnVmZmVyVXBkYXRlSWQgPSB0aGlzLnV2QnVmZmVyLl91cGRhdGVJRDtcbiAgICB0aGlzLl90ZXh0dXJlVXBkYXRlSWQgPSB0aGlzLnV2TWF0cml4Ll91cGRhdGVJRDtcbiAgICBjb25zdCBkYXRhID0gdGhpcy51dkJ1ZmZlci5kYXRhO1xuICAgIGlmICghdGhpcy5kYXRhIHx8IHRoaXMuZGF0YS5sZW5ndGggIT09IGRhdGEubGVuZ3RoKSB7XG4gICAgICB0aGlzLmRhdGEgPSBuZXcgRmxvYXQzMkFycmF5KGRhdGEubGVuZ3RoKTtcbiAgICB9XG4gICAgdGhpcy51dk1hdHJpeC5tdWx0aXBseVV2cyhkYXRhLCB0aGlzLmRhdGEpO1xuICAgIHRoaXMuX3VwZGF0ZUlEKys7XG4gIH1cbn1cblxuZXhwb3J0cy5NZXNoQmF0Y2hVdnMgPSBNZXNoQmF0Y2hVdnM7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1NZXNoQmF0Y2hVdnMuanMubWFwXG4iLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbnZhciBjb3JlID0gcmVxdWlyZSgnQHBpeGkvY29yZScpO1xuXG5jbGFzcyBNZXNoR2VvbWV0cnkgZXh0ZW5kcyBjb3JlLkdlb21ldHJ5IHtcbiAgY29uc3RydWN0b3IodmVydGljZXMsIHV2cywgaW5kZXgpIHtcbiAgICBzdXBlcigpO1xuICAgIGNvbnN0IHZlcnRpY2VzQnVmZmVyID0gbmV3IGNvcmUuQnVmZmVyKHZlcnRpY2VzKTtcbiAgICBjb25zdCB1dnNCdWZmZXIgPSBuZXcgY29yZS5CdWZmZXIodXZzLCB0cnVlKTtcbiAgICBjb25zdCBpbmRleEJ1ZmZlciA9IG5ldyBjb3JlLkJ1ZmZlcihpbmRleCwgdHJ1ZSwgdHJ1ZSk7XG4gICAgdGhpcy5hZGRBdHRyaWJ1dGUoXCJhVmVydGV4UG9zaXRpb25cIiwgdmVydGljZXNCdWZmZXIsIDIsIGZhbHNlLCBjb3JlLlRZUEVTLkZMT0FUKS5hZGRBdHRyaWJ1dGUoXCJhVGV4dHVyZUNvb3JkXCIsIHV2c0J1ZmZlciwgMiwgZmFsc2UsIGNvcmUuVFlQRVMuRkxPQVQpLmFkZEluZGV4KGluZGV4QnVmZmVyKTtcbiAgICB0aGlzLl91cGRhdGVJZCA9IC0xO1xuICB9XG4gIGdldCB2ZXJ0ZXhEaXJ0eUlkKCkge1xuICAgIHJldHVybiB0aGlzLmJ1ZmZlcnNbMF0uX3VwZGF0ZUlEO1xuICB9XG59XG5cbmV4cG9ydHMuTWVzaEdlb21ldHJ5ID0gTWVzaEdlb21ldHJ5O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9TWVzaEdlb21ldHJ5LmpzLm1hcFxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG52YXIgY29yZSA9IHJlcXVpcmUoJ0BwaXhpL2NvcmUnKTtcbnZhciBtZXNoJDEgPSByZXF1aXJlKCcuL3NoYWRlci9tZXNoLmpzJyk7XG52YXIgbWVzaCA9IHJlcXVpcmUoJy4vc2hhZGVyL21lc2gyLmpzJyk7XG5cbmNsYXNzIE1lc2hNYXRlcmlhbCBleHRlbmRzIGNvcmUuU2hhZGVyIHtcbiAgY29uc3RydWN0b3IodVNhbXBsZXIsIG9wdGlvbnMpIHtcbiAgICBjb25zdCB1bmlmb3JtcyA9IHtcbiAgICAgIHVTYW1wbGVyLFxuICAgICAgYWxwaGE6IDEsXG4gICAgICB1VGV4dHVyZU1hdHJpeDogY29yZS5NYXRyaXguSURFTlRJVFksXG4gICAgICB1Q29sb3I6IG5ldyBGbG9hdDMyQXJyYXkoWzEsIDEsIDEsIDFdKVxuICAgIH07XG4gICAgb3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oe1xuICAgICAgdGludDogMTY3NzcyMTUsXG4gICAgICBhbHBoYTogMSxcbiAgICAgIHBsdWdpbk5hbWU6IFwiYmF0Y2hcIlxuICAgIH0sIG9wdGlvbnMpO1xuICAgIGlmIChvcHRpb25zLnVuaWZvcm1zKSB7XG4gICAgICBPYmplY3QuYXNzaWduKHVuaWZvcm1zLCBvcHRpb25zLnVuaWZvcm1zKTtcbiAgICB9XG4gICAgc3VwZXIob3B0aW9ucy5wcm9ncmFtIHx8IGNvcmUuUHJvZ3JhbS5mcm9tKG1lc2hbXCJkZWZhdWx0XCJdLCBtZXNoJDFbXCJkZWZhdWx0XCJdKSwgdW5pZm9ybXMpO1xuICAgIHRoaXMuX2NvbG9yRGlydHkgPSBmYWxzZTtcbiAgICB0aGlzLnV2TWF0cml4ID0gbmV3IGNvcmUuVGV4dHVyZU1hdHJpeCh1U2FtcGxlcik7XG4gICAgdGhpcy5iYXRjaGFibGUgPSBvcHRpb25zLnByb2dyYW0gPT09IHZvaWQgMDtcbiAgICB0aGlzLnBsdWdpbk5hbWUgPSBvcHRpb25zLnBsdWdpbk5hbWU7XG4gICAgdGhpcy5fdGludENvbG9yID0gbmV3IGNvcmUuQ29sb3Iob3B0aW9ucy50aW50KTtcbiAgICB0aGlzLl90aW50UkdCID0gdGhpcy5fdGludENvbG9yLnRvTGl0dGxlRW5kaWFuTnVtYmVyKCk7XG4gICAgdGhpcy5fY29sb3JEaXJ0eSA9IHRydWU7XG4gICAgdGhpcy5hbHBoYSA9IG9wdGlvbnMuYWxwaGE7XG4gIH1cbiAgZ2V0IHRleHR1cmUoKSB7XG4gICAgcmV0dXJuIHRoaXMudW5pZm9ybXMudVNhbXBsZXI7XG4gIH1cbiAgc2V0IHRleHR1cmUodmFsdWUpIHtcbiAgICBpZiAodGhpcy51bmlmb3Jtcy51U2FtcGxlciAhPT0gdmFsdWUpIHtcbiAgICAgIGlmICghdGhpcy51bmlmb3Jtcy51U2FtcGxlci5iYXNlVGV4dHVyZS5hbHBoYU1vZGUgIT09ICF2YWx1ZS5iYXNlVGV4dHVyZS5hbHBoYU1vZGUpIHtcbiAgICAgICAgdGhpcy5fY29sb3JEaXJ0eSA9IHRydWU7XG4gICAgICB9XG4gICAgICB0aGlzLnVuaWZvcm1zLnVTYW1wbGVyID0gdmFsdWU7XG4gICAgICB0aGlzLnV2TWF0cml4LnRleHR1cmUgPSB2YWx1ZTtcbiAgICB9XG4gIH1cbiAgc2V0IGFscGhhKHZhbHVlKSB7XG4gICAgaWYgKHZhbHVlID09PSB0aGlzLl9hbHBoYSlcbiAgICAgIHJldHVybjtcbiAgICB0aGlzLl9hbHBoYSA9IHZhbHVlO1xuICAgIHRoaXMuX2NvbG9yRGlydHkgPSB0cnVlO1xuICB9XG4gIGdldCBhbHBoYSgpIHtcbiAgICByZXR1cm4gdGhpcy5fYWxwaGE7XG4gIH1cbiAgc2V0IHRpbnQodmFsdWUpIHtcbiAgICBpZiAodmFsdWUgPT09IHRoaXMudGludClcbiAgICAgIHJldHVybjtcbiAgICB0aGlzLl90aW50Q29sb3Iuc2V0VmFsdWUodmFsdWUpO1xuICAgIHRoaXMuX3RpbnRSR0IgPSB0aGlzLl90aW50Q29sb3IudG9MaXR0bGVFbmRpYW5OdW1iZXIoKTtcbiAgICB0aGlzLl9jb2xvckRpcnR5ID0gdHJ1ZTtcbiAgfVxuICBnZXQgdGludCgpIHtcbiAgICByZXR1cm4gdGhpcy5fdGludENvbG9yLnZhbHVlO1xuICB9XG4gIGdldCB0aW50VmFsdWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3RpbnRDb2xvci50b051bWJlcigpO1xuICB9XG4gIHVwZGF0ZSgpIHtcbiAgICBpZiAodGhpcy5fY29sb3JEaXJ0eSkge1xuICAgICAgdGhpcy5fY29sb3JEaXJ0eSA9IGZhbHNlO1xuICAgICAgY29uc3QgYmFzZVRleHR1cmUgPSB0aGlzLnRleHR1cmUuYmFzZVRleHR1cmU7XG4gICAgICBjb25zdCBhcHBseVRvQ2hhbm5lbHMgPSBiYXNlVGV4dHVyZS5hbHBoYU1vZGU7XG4gICAgICBjb3JlLkNvbG9yLnNoYXJlZC5zZXRWYWx1ZSh0aGlzLl90aW50Q29sb3IpLnByZW11bHRpcGx5KHRoaXMuX2FscGhhLCBhcHBseVRvQ2hhbm5lbHMpLnRvQXJyYXkodGhpcy51bmlmb3Jtcy51Q29sb3IpO1xuICAgIH1cbiAgICBpZiAodGhpcy51dk1hdHJpeC51cGRhdGUoKSkge1xuICAgICAgdGhpcy51bmlmb3Jtcy51VGV4dHVyZU1hdHJpeCA9IHRoaXMudXZNYXRyaXgubWFwQ29vcmQ7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydHMuTWVzaE1hdGVyaWFsID0gTWVzaE1hdGVyaWFsO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9TWVzaE1hdGVyaWFsLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9