"use strict";
(self["webpackChunkwedding_website"] = self["webpackChunkwedding_website"] || []).push([["vendors-node_modules_dothtml_lib_styling_css-types_ts_css-filter_js-node_modules_dothtml_lib_-92259a"],{

/***/ "./node_modules/dothtml/lib/styling/css-types.ts/css-filter.js":
/*!*********************************************************************!*\
  !*** ./node_modules/dothtml/lib/styling/css-types.ts/css-filter.js ***!
  \*********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
const dot_util_1 = __webpack_require__(/*! ../../dot-util */ "./node_modules/dothtml/lib/dot-util.js");
const css_data_type_1 = __importDefault(__webpack_require__(/*! ./css-data-type */ "./node_modules/dothtml/lib/styling/css-types.ts/css-data-type.js"));
const css_length_1 = __importDefault(__webpack_require__(/*! ./css-length */ "./node_modules/dothtml/lib/styling/css-types.ts/css-length.js"));
const css_percentage_1 = __importDefault(__webpack_require__(/*! ./css-percentage */ "./node_modules/dothtml/lib/styling/css-types.ts/css-percentage.js"));
const css_color_1 = __importDefault(__webpack_require__(/*! ./css-color */ "./node_modules/dothtml/lib/styling/css-types.ts/css-color.js"));
class CssFilter extends css_data_type_1.default {
    constructor(value) {
        super("filter");
        this.filters = [];
        if (typeof value == "string") {
            this.simpleValue = value;
            return; //?? Need a better way to handle this.
        }
        else if ((0, dot_util_1.isF)(value)) {
            value(this);
            // console.log(this.toString());
        }
        //var ret = {value: value, type: cssDataType};
        // The old way of doing transformations was that it was set up to accept a big string. The added complexity was to support animations.
        // The new way is to use the builder. But I might want to come back and revisit the idea of accepting a string.
        // For instance, a use case of accepting a string for a transformation is if we're trying to animate transforms generated by another framework.
        // Not sure if that's realistic.
        // var transformations = value.split(/\)\s*/); transformations.pop(); for(var i = 0; i < transformations.length; i++) transformations[i] += ")";
        // // var cos = Math.cos; var sin = Math.sin; var tan = Math.tan;
        // for(var t = 0; t < transformations.length; t++){
        // 	var trans = transformations[t].trim();
        // 	var parts = trans.split(/[\(\)]/);
        // 	var func = parts[0]
        // 	var p = parts[1].split(/\s*,\s*/)
        // 	if(this[func]){
        // 		this[func].apply(this, p);
        // 	}
        // }
    }
    toString() {
        if (this.simpleValue) {
            return this.simpleValue;
        }
        var ret = "";
        for (var i = 0; i < this.filters.length; i++) {
            var t = this.filters[i];
            ret += t.filter + "(";
            for (var k = 0; k < t.args.length; k++) {
                ret += t.args[k].toString() + " ";
            }
            ret = ret.trim() + ") ";
        }
        return ret.trim();
    }
    appendFilterString(filter, args) {
        //this.finalMatrix = dotcss.matrixMultiply3D(m, this.finalMatrix);
        this.filters.push({ filter: filter, args: args });
        /*if(this.value.length > 0) this.value += " ";
        this.value += transformation + "(";
        for(var i = 0; i < args.length; i++){
            this.value += args[i] + (i == args.length -1 ? "" : ",")
        }*/
        return this;
    }
    blur(v) {
        return this.appendFilterString("blur", [new css_length_1.default(v)]);
    }
    brightness(v) {
        return this.appendFilterString("brightness", [new css_percentage_1.default(v)]);
    }
    contrast(v) {
        return this.appendFilterString("contrast", [new css_percentage_1.default(v)]);
    }
    dropShadow(x, y, blur, color) {
        return this.appendFilterString("drop-shadow", [new css_length_1.default(x), new css_length_1.default(y), new css_length_1.default(blur), new css_color_1.default(color)]);
    }
    grayscale(v) {
        return this.appendFilterString("grayscale", [new css_percentage_1.default(v)]);
    }
    hueRotate(v) {
        return this.appendFilterString("hue-rotate", [new css_percentage_1.default(v)]);
    }
    invert(v) {
        return this.appendFilterString("invert", [new css_percentage_1.default(v)]);
    }
    opacity(v) {
        return this.appendFilterString("opacity", [new css_percentage_1.default(v)]);
    }
    sepia(v) {
        return this.appendFilterString("sepia", [new css_percentage_1.default(v)]);
    }
    saturate(v) {
        return this.appendFilterString("saturate", [new css_percentage_1.default(v)]);
    }
}
exports["default"] = CssFilter;
// Extend the above with special length and degree functions.
// TODO: when I have some time it would be nice to do the unit functions the same way we do for transforms.
// const lengthFuncs = "translate|translate3d|translateX|translateY|translateZ|perspective".split("|");
// const angleFuncs = "rotate|rotateX|rotateY|rotateZ|skew|skewX|skewY".split("|");
// for(let i = 0; i < lengthFuncs.length; i++){
// 	let F = lengthFuncs[i];
// 	for(let u = 0; u < AllLengthUnits.length; u++){
// 		let uu = AllLengthUnits[u];
// 		CssTransform.prototype[F + (uu.jsName || uu.unit)] = function(){
// 			for(var i = 0; i < arguments.length; i++) arguments[i] = arguments[i] + uu.unit.toLowerCase();
// 			return CssTransform.prototype[F].apply(this, arguments);
// 		}
// 	}
// }
// for(let i = 0; i < angleFuncs.length; i++){
// 	let F = angleFuncs[i];
// 	for(let u = 0; u < AllAngleUnits.length; u++){
// 		let uu = AllAngleUnits[u];
// 		CssTransform.prototype[F + (uu.unit)] = function(){
// 			for(var i = 0; i < arguments.length; i++) arguments[i] = arguments[i] + uu.unit.toLowerCase();
// 			return CssTransform.prototype[F].apply(this, arguments);
// 		}
// 	}
// }
//# sourceMappingURL=css-filter.js.map

/***/ }),

/***/ "./node_modules/dothtml/lib/styling/css-types.ts/css-length.js":
/*!*********************************************************************!*\
  !*** ./node_modules/dothtml/lib/styling/css-types.ts/css-length.js ***!
  \*********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
const dot_util_1 = __webpack_require__(/*! ../../dot-util */ "./node_modules/dothtml/lib/dot-util.js");
const css_data_type_1 = __importDefault(__webpack_require__(/*! ./css-data-type */ "./node_modules/dothtml/lib/styling/css-types.ts/css-data-type.js"));
//TODO: this should support multiple lengths.
// TODO: add some test cases to test these.
class CssLength extends css_data_type_1.default {
    constructor(value) {
        super("length");
        value = value || "0px";
        if (!isNaN(value))
            value = Math.round(value) + "px";
        this.length = Number(value.match(dot_util_1.floatRegex)[0]);
        this.units = value.split(dot_util_1.floatRegex)[1] || "px";
    }
    toString() {
        return `${this.length}${this.units}`;
    }
}
exports["default"] = CssLength;
//# sourceMappingURL=css-length.js.map

/***/ }),

/***/ "./node_modules/dothtml/lib/styling/css-types.ts/css-number.js":
/*!*********************************************************************!*\
  !*** ./node_modules/dothtml/lib/styling/css-types.ts/css-number.js ***!
  \*********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
const css_data_type_1 = __importDefault(__webpack_require__(/*! ./css-data-type */ "./node_modules/dothtml/lib/styling/css-types.ts/css-data-type.js"));
class CssNumber extends css_data_type_1.default {
    constructor(value) {
        super("number");
        this.value = Number(value);
    }
    toString() {
        return this.value;
    }
}
exports["default"] = CssNumber;
//# sourceMappingURL=css-number.js.map

/***/ }),

/***/ "./node_modules/dothtml/lib/styling/css-types.ts/css-percentage.js":
/*!*************************************************************************!*\
  !*** ./node_modules/dothtml/lib/styling/css-types.ts/css-percentage.js ***!
  \*************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
const css_length_1 = __importDefault(__webpack_require__(/*! ./css-length */ "./node_modules/dothtml/lib/styling/css-types.ts/css-length.js"));
class CssPercentage extends css_length_1.default {
    constructor(value) {
        super(isNaN(value) ? value : `${value}%`);
    }
}
exports["default"] = CssPercentage;
//# sourceMappingURL=css-percentage.js.map

/***/ }),

/***/ "./node_modules/dothtml/lib/styling/css-types.ts/css-transform.js":
/*!************************************************************************!*\
  !*** ./node_modules/dothtml/lib/styling/css-types.ts/css-transform.js ***!
  \************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
const dot_util_1 = __webpack_require__(/*! ../../dot-util */ "./node_modules/dothtml/lib/dot-util.js");
const unit_function_tables_1 = __webpack_require__(/*! ../unit-function-tables */ "./node_modules/dothtml/lib/styling/unit-function-tables.js");
const css_angle_1 = __importDefault(__webpack_require__(/*! ./css-angle */ "./node_modules/dothtml/lib/styling/css-types.ts/css-angle.js"));
const css_data_type_1 = __importDefault(__webpack_require__(/*! ./css-data-type */ "./node_modules/dothtml/lib/styling/css-types.ts/css-data-type.js"));
const css_length_1 = __importDefault(__webpack_require__(/*! ./css-length */ "./node_modules/dothtml/lib/styling/css-types.ts/css-length.js"));
class CssTransform extends css_data_type_1.default {
    constructor(value) {
        super("transformation");
        this.transformations = [];
        //this.finalMatrix = [1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1];
        if (typeof value == "string") {
            //this.value = "matrix3d(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1)";
            this.simpleValue = value;
            return; //?? Need a better way to handle this.
        }
        else if ((0, dot_util_1.isF)(value)) {
            value(this);
        }
        //var ret = {value: value, type: cssDataType};
        // The old way of doing transformations was that it was set up to accept a big string. The added complexity was to support animations.
        // The new way is to use the builder. But I might want to come back and revisit the idea of accepting a string.
        // For instance, a use case of accepting a string for a transformation is if we're trying to animate transforms generated by another framework.
        // Not sure if that's realistic.
        // var transformations = value.split(/\)\s*/); transformations.pop(); for(var i = 0; i < transformations.length; i++) transformations[i] += ")";
        // // var cos = Math.cos; var sin = Math.sin; var tan = Math.tan;
        // for(var t = 0; t < transformations.length; t++){
        // 	var trans = transformations[t].trim();
        // 	var parts = trans.split(/[\(\)]/);
        // 	var func = parts[0]
        // 	var p = parts[1].split(/\s*,\s*/)
        // 	if(this[func]){
        // 		this[func].apply(this, p);
        // 	}
        // }
    }
    toString() {
        if (this.simpleValue) {
            return this.simpleValue;
        }
        var ret = "";
        for (var i = 0; i < this.transformations.length; i++) {
            var t = this.transformations[i];
            ret += t.transformation + "(";
            for (var k = 0; k < t.args.length; k++) {
                ret += t.args[k].toString() + ",";
            }
            ret = ret.substring(0, ret.length - 1);
            ret += ") ";
        }
        return ret.trim();
    }
    appendTransformString(transformation, args) {
        //this.finalMatrix = dotcss.matrixMultiply3D(m, this.finalMatrix);
        this.transformations.push({ transformation: transformation, args: args });
        /*if(this.value.length > 0) this.value += " ";
        this.value += transformation + "(";
        for(var i = 0; i < args.length; i++){
            this.value += args[i] + (i == args.length -1 ? "" : ",")
        }*/
        return this;
    }
    matrix3d(a1, b1, c1, d1, a2, b2, c2, d2, a3, b3, c3, d3, a4, b4, c4, d4) {
        // Why do we need this again?
        // Going to try to remove it to see what breaks. I believe it's used for animations.
        // this.finalMatrix = dotcss.matrixMultiply3D(arguments as unknown as Array<number>, this.finalMatrix);
        return this.appendTransformString("matrix3d", arguments);
    }
    matrix(a, b, c, d, tx, ty) {
        return this.appendTransformString("matrix", arguments);
    }
    translate(x, y) {
        return arguments.length == 1
            ? this.appendTransformString("translate", [new css_length_1.default(x)] /*, [1,0,0,0,0,1,0,0,0,0,1,0,x,0,0,1]*/)
            : this.appendTransformString("translate", [new css_length_1.default(x), new css_length_1.default(y)] /*, [1,0,0,0,0,1,0,0,0,0,1,0,x,y,0,1]*/);
    }
    translate3d(x, y, z) {
        return this.appendTransformString("translate3d", [new css_length_1.default(x), new css_length_1.default(y), new css_length_1.default(z)] /*, [1,0,0,0,0,1,0,0,0,0,1,0,x,y,z,1]*/);
    }
    translateX(x) {
        //var x = dotcss.lengthToPx(p[0]);
        //this.updateValue("translateX", [new CssLength(x + "px")]/*, [1,0,0,0,0,1,0,0,0,0,1,0,x,0,0,1]*/);
        return this.appendTransformString("translateX", [new css_length_1.default(x)]);
    }
    translateY(y) {
        //var y = dotcss.lengthToPx(p[0]);
        //this.updateValue("translateY", [new CssLength(y + "px")]/*, [1,0,0,0,0,1,0,0,0,0,1,0,0,y,0,1]*/);
        return this.appendTransformString("translateY", [new css_length_1.default(y)]);
    }
    translateZ(z) {
        //var z = dotcss.lengthToPx(p[0]);
        //this.updateValue("translateZ", [new CssLength(z + "px")]/*, [1,0,0,0,0,1,0,0,0,0,1,0,0,0,z,1]*/);
        return this.appendTransformString("translateZ", [new css_length_1.default(z)]);
    }
    scale(x, y) {
        return this.appendTransformString("scale", [x, y ?? 1] /*, [x,0,0,0,0,y,0,0,0,0,1,0,0,0,0,1]*/);
    }
    scale3d(x, y, z) {
        return this.appendTransformString("scale3d", [x, y, z] /*, [p[0],0,0,0,0,p[1],0,0,0,0,p[2],0,0,0,0,1]*/);
    }
    scaleX(x) {
        //this.updateValue("scaleX", p/*, [p[0],0,0,0,0,1,0,0,0,0,1,0,0,0,0,1]*/);
        return this.appendTransformString("scaleX", [x]);
    }
    scaleY(y) {
        //this.updateValue("scaleY", p/*, [1,0,0,0,0,p[0],0,0,0,0,1,0,0,0,0,1]*/);
        return this.appendTransformString("scaleY", [y]);
    }
    scaleZ(z) {
        //this.updateValue("scaleZ", p/*, [1,0,0,0,0,1,0,0,0,0,p[0],0,0,0,0,1]*/);
        return this.appendTransformString("scaleZ", [z]);
    }
    rotate(x) {
        // var a = Util.angleToDeg(x);
        return this.appendTransformString("rotate", [new css_angle_1.default(x)] /*, [Math.cos(a),Math.sin(a),0,0,-Math.sin(axxx),Math.cos(axxx),0,0,0,0,1,0,0,0,0,1]*/);
    }
    rotate3d(x, y, z, a) {
        return this.appendTransformString("rotate3d", [x, y, z, new css_angle_1.default(a)] /*,
            [1+C*(x*x-1),	z*S+x*y*C,		-y*S+x*z*C,		0,
            -z*S+x*y*C,		1+C*(y*y-1),	x*S+y*z*C,		0,
            y*S+x*z*C,		-x*S+y*z*C,		1+C*(z*z-1),	0,
            0,				0,				0,				1]*/);
    }
    // Manually create the 4 unit functions for rotate 3d since the arg structure is mixed.
    rotate3dDeg(x, y, z, a) { return this.rotate3d(x, y, z, a); }
    rotate3dRad(x, y, z, a) { return this.rotate3d(x, y, z, `${a}rad`); }
    rotate3dGrad(x, y, z, a) { return this.rotate3d(x, y, z, `${a}grad`); }
    rotate3dTurn(x, y, z, a) { return this.rotate3d(x, y, z, `${a}turn`); }
    rotateX(x) {
        return this.appendTransformString("rotateX", [new css_angle_1.default(x)] /*, [1,0,0,0,0,Math.cos(axx),Math.sin(axx),0,0,-Math.sin(axx),Math.cos(axx),0,0,0,0,1]*/);
    }
    rotateY(y) {
        return this.appendTransformString("rotateY", [new css_angle_1.default(y)]);
    }
    rotateZ(z) {
        return this.appendTransformString("rotateZ", [new css_angle_1.default(z)]);
    }
    skew(x, y) {
        return arguments.length == 1
            ? this.appendTransformString("skew", [new css_angle_1.default(x)] /*, [1,0,0,0,Math.tan(axxxxx),1,0,0,0,0,1,0,0,0,0,1]*/)
            : this.appendTransformString("skew", [new css_angle_1.default(x), new css_angle_1.default(y)] /*, [1,Math.tan(axxxy),0,0,Math.tan(axxxx),1,0,0,0,0,1,0,0,0,0,1]*/);
    }
    skewX(x) {
        return this.appendTransformString("skewX", [new css_angle_1.default(x)]);
    }
    skewY(y) {
        return this.appendTransformString("skewY", [new css_angle_1.default(y)]);
    }
    perspective(d) {
        return this.appendTransformString("perspective", [new css_length_1.default(d)] /*, [1,0,0,0,0,1,0,0,0,0,1,0,0,0,dotcss.formatNumberValue(-1 / d),1]*/);
    }
}
exports["default"] = CssTransform;
// Extend the above with special length and degree functions.
const lengthFuncs = "translate|translate3d|translateX|translateY|translateZ|perspective".split("|");
const angleFuncs = "rotate|rotateX|rotateY|rotateZ|skew|skewX|skewY".split("|");
for (let i = 0; i < lengthFuncs.length; i++) {
    let F = lengthFuncs[i];
    for (let u = 0; u < unit_function_tables_1.AllLengthUnits.length; u++) {
        let uu = unit_function_tables_1.AllLengthUnits[u];
        CssTransform.prototype[F + (uu.jsName || uu.unit)] = function () {
            for (var i = 0; i < arguments.length; i++)
                arguments[i] = arguments[i] + uu.unit.toLowerCase();
            return CssTransform.prototype[F].apply(this, arguments);
        };
    }
}
for (let i = 0; i < angleFuncs.length; i++) {
    let F = angleFuncs[i];
    for (let u = 0; u < unit_function_tables_1.AllAngleUnits.length; u++) {
        let uu = unit_function_tables_1.AllAngleUnits[u];
        CssTransform.prototype[F + (uu.unit)] = function () {
            for (var i = 0; i < arguments.length; i++)
                arguments[i] = arguments[i] + uu.unit.toLowerCase();
            return CssTransform.prototype[F].apply(this, arguments);
        };
    }
}
//# sourceMappingURL=css-transform.js.map

/***/ }),

/***/ "./node_modules/dothtml/lib/styling/css-types.ts/css-unknown.js":
/*!**********************************************************************!*\
  !*** ./node_modules/dothtml/lib/styling/css-types.ts/css-unknown.js ***!
  \**********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
const css_data_type_1 = __importDefault(__webpack_require__(/*! ./css-data-type */ "./node_modules/dothtml/lib/styling/css-types.ts/css-data-type.js"));
class CssUnknown extends css_data_type_1.default {
    constructor(value) {
        super("unknown");
        this.value = value;
    }
    toString() {
        return this.value;
    }
}
exports["default"] = CssUnknown;
//# sourceMappingURL=css-unknown.js.map

/***/ }),

/***/ "./node_modules/dothtml/lib/styling/css-types.ts/css-url.js":
/*!******************************************************************!*\
  !*** ./node_modules/dothtml/lib/styling/css-types.ts/css-url.js ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
const css_data_type_1 = __importDefault(__webpack_require__(/*! ./css-data-type */ "./node_modules/dothtml/lib/styling/css-types.ts/css-data-type.js"));
class CssUrl extends css_data_type_1.default {
    constructor(value) {
        super("url");
        this.url = null;
        if (!value || value.length == 0 || (value.length == 1 && value[0] == "" || value[0] == "none" || value[0] == "initial" || value[0] == "inherit")) {
            this.url = null;
        }
        else {
            this.url = [];
            for (var i = 0; i < value.length; i++) {
                var currentURL = "";
                if (value[i].toLowerCase().indexOf("url") === 0) {
                    var url = value[i].substring(value[i].indexOf("("), value[i].lastIndexOf(")")).trim();
                    if ((url.indexOf("\"") && url.lastIndexOf("\"") == url.length - 1) ||
                        (url.indexOf("'") && url.lastIndexOf("'") == url.length - 1)) {
                        url = url.substring(1, url.length - 1);
                    }
                    this.url.push(url);
                }
                else {
                    this.url.push(value[i]);
                }
            }
        }
    }
    toString() {
        if (!this.url)
            return "none";
        else {
            var ret = [];
            for (var i = 0; i < this.url.length; i++) {
                ret.push("url(\"" + this.url[i] + "\")");
            }
            return ret.join(", ");
        }
    }
}
exports["default"] = CssUrl;
//# sourceMappingURL=css-url.js.map

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,